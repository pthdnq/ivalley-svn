
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace COMBO_DAL
{
	public abstract class _AdminLogin : SqlClientEntity
	{
		public _AdminLogin()
		{
			this.QuerySource = "AdminLogin";
			this.MappingName = "AdminLogin";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_AdminLoginLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AdminLoginID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AdminLoginID, AdminLoginID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_AdminLoginLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AdminLoginID
			{
				get
				{
					return new SqlParameter("@AdminLoginID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AdminUserName
			{
				get
				{
					return new SqlParameter("@AdminUserName", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter AdminPassword
			{
				get
				{
					return new SqlParameter("@AdminPassword", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AdminName
			{
				get
				{
					return new SqlParameter("@AdminName", SqlDbType.NVarChar, 30);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AdminLoginID = "AdminLoginID";
            public const string AdminUserName = "AdminUserName";
            public const string AdminPassword = "AdminPassword";
            public const string AdminName = "AdminName";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AdminLoginID] = _AdminLogin.PropertyNames.AdminLoginID;
					ht[AdminUserName] = _AdminLogin.PropertyNames.AdminUserName;
					ht[AdminPassword] = _AdminLogin.PropertyNames.AdminPassword;
					ht[AdminName] = _AdminLogin.PropertyNames.AdminName;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AdminLoginID = "AdminLoginID";
            public const string AdminUserName = "AdminUserName";
            public const string AdminPassword = "AdminPassword";
            public const string AdminName = "AdminName";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AdminLoginID] = _AdminLogin.ColumnNames.AdminLoginID;
					ht[AdminUserName] = _AdminLogin.ColumnNames.AdminUserName;
					ht[AdminPassword] = _AdminLogin.ColumnNames.AdminPassword;
					ht[AdminName] = _AdminLogin.ColumnNames.AdminName;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AdminLoginID = "s_AdminLoginID";
            public const string AdminUserName = "s_AdminUserName";
            public const string AdminPassword = "s_AdminPassword";
            public const string AdminName = "s_AdminName";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AdminLoginID
	    {
			get
	        {
				return base.Getint(ColumnNames.AdminLoginID);
			}
			set
	        {
				base.Setint(ColumnNames.AdminLoginID, value);
			}
		}

		public virtual string AdminUserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AdminUserName);
			}
			set
	        {
				base.Setstring(ColumnNames.AdminUserName, value);
			}
		}

		public virtual string AdminPassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.AdminPassword);
			}
			set
	        {
				base.Setstring(ColumnNames.AdminPassword, value);
			}
		}

		public virtual string AdminName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AdminName);
			}
			set
	        {
				base.Setstring(ColumnNames.AdminName, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AdminLoginID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdminLoginID) ? string.Empty : base.GetintAsString(ColumnNames.AdminLoginID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdminLoginID);
				else
					this.AdminLoginID = base.SetintAsString(ColumnNames.AdminLoginID, value);
			}
		}

		public virtual string s_AdminUserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdminUserName) ? string.Empty : base.GetstringAsString(ColumnNames.AdminUserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdminUserName);
				else
					this.AdminUserName = base.SetstringAsString(ColumnNames.AdminUserName, value);
			}
		}

		public virtual string s_AdminPassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdminPassword) ? string.Empty : base.GetstringAsString(ColumnNames.AdminPassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdminPassword);
				else
					this.AdminPassword = base.SetstringAsString(ColumnNames.AdminPassword, value);
			}
		}

		public virtual string s_AdminName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdminName) ? string.Empty : base.GetstringAsString(ColumnNames.AdminName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdminName);
				else
					this.AdminName = base.SetstringAsString(ColumnNames.AdminName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AdminLoginID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdminLoginID, Parameters.AdminLoginID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdminUserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdminUserName, Parameters.AdminUserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdminPassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdminPassword, Parameters.AdminPassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdminName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdminName, Parameters.AdminName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AdminLoginID
		    {
				get
		        {
					if(_AdminLoginID_W == null)
	        	    {
						_AdminLoginID_W = TearOff.AdminLoginID;
					}
					return _AdminLoginID_W;
				}
			}

			public WhereParameter AdminUserName
		    {
				get
		        {
					if(_AdminUserName_W == null)
	        	    {
						_AdminUserName_W = TearOff.AdminUserName;
					}
					return _AdminUserName_W;
				}
			}

			public WhereParameter AdminPassword
		    {
				get
		        {
					if(_AdminPassword_W == null)
	        	    {
						_AdminPassword_W = TearOff.AdminPassword;
					}
					return _AdminPassword_W;
				}
			}

			public WhereParameter AdminName
		    {
				get
		        {
					if(_AdminName_W == null)
	        	    {
						_AdminName_W = TearOff.AdminName;
					}
					return _AdminName_W;
				}
			}

			private WhereParameter _AdminLoginID_W = null;
			private WhereParameter _AdminUserName_W = null;
			private WhereParameter _AdminPassword_W = null;
			private WhereParameter _AdminName_W = null;

			public void WhereClauseReset()
			{
				_AdminLoginID_W = null;
				_AdminUserName_W = null;
				_AdminPassword_W = null;
				_AdminName_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AdminLoginID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdminLoginID, Parameters.AdminLoginID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdminUserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdminUserName, Parameters.AdminUserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdminPassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdminPassword, Parameters.AdminPassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdminName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdminName, Parameters.AdminName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AdminLoginID
		    {
				get
		        {
					if(_AdminLoginID_W == null)
	        	    {
						_AdminLoginID_W = TearOff.AdminLoginID;
					}
					return _AdminLoginID_W;
				}
			}

			public AggregateParameter AdminUserName
		    {
				get
		        {
					if(_AdminUserName_W == null)
	        	    {
						_AdminUserName_W = TearOff.AdminUserName;
					}
					return _AdminUserName_W;
				}
			}

			public AggregateParameter AdminPassword
		    {
				get
		        {
					if(_AdminPassword_W == null)
	        	    {
						_AdminPassword_W = TearOff.AdminPassword;
					}
					return _AdminPassword_W;
				}
			}

			public AggregateParameter AdminName
		    {
				get
		        {
					if(_AdminName_W == null)
	        	    {
						_AdminName_W = TearOff.AdminName;
					}
					return _AdminName_W;
				}
			}

			private AggregateParameter _AdminLoginID_W = null;
			private AggregateParameter _AdminUserName_W = null;
			private AggregateParameter _AdminPassword_W = null;
			private AggregateParameter _AdminName_W = null;

			public void AggregateClauseReset()
			{
				_AdminLoginID_W = null;
				_AdminUserName_W = null;
				_AdminPassword_W = null;
				_AdminName_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_AdminLoginInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AdminLoginID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_AdminLoginUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_AdminLoginDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AdminLoginID);
			p.SourceColumn = ColumnNames.AdminLoginID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AdminLoginID);
			p.SourceColumn = ColumnNames.AdminLoginID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdminUserName);
			p.SourceColumn = ColumnNames.AdminUserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdminPassword);
			p.SourceColumn = ColumnNames.AdminPassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdminName);
			p.SourceColumn = ColumnNames.AdminName;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
