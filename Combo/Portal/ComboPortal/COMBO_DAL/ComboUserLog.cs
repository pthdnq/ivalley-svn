
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace COMBO_DAL
{
	public abstract class _ComboUserLog : SqlClientEntity
	{
		public _ComboUserLog()
		{
			this.QuerySource = "ComboUserLog";
			this.MappingName = "ComboUserLog";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ComboUserLogLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ComboUserLogID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ComboUserLogID, ComboUserLogID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ComboUserLogLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ComboUserLogID
			{
				get
				{
					return new SqlParameter("@ComboUserLogID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ComboUserID
			{
				get
				{
					return new SqlParameter("@ComboUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter DisplayName
			{
				get
				{
					return new SqlParameter("@DisplayName", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter BirthDate
			{
				get
				{
					return new SqlParameter("@BirthDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Bio
			{
				get
				{
					return new SqlParameter("@Bio", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserRankID
			{
				get
				{
					return new SqlParameter("@UserRankID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Phone
			{
				get
				{
					return new SqlParameter("@Phone", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter Website
			{
				get
				{
					return new SqlParameter("@Website", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter LogDate
			{
				get
				{
					return new SqlParameter("@LogDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ComboUserLogID = "ComboUserLogID";
            public const string ComboUserID = "ComboUserID";
            public const string UserName = "UserName";
            public const string DisplayName = "DisplayName";
            public const string Email = "Email";
            public const string BirthDate = "BirthDate";
            public const string Bio = "Bio";
            public const string CountryID = "CountryID";
            public const string UserRankID = "UserRankID";
            public const string Phone = "Phone";
            public const string Website = "Website";
            public const string LogDate = "LogDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ComboUserLogID] = _ComboUserLog.PropertyNames.ComboUserLogID;
					ht[ComboUserID] = _ComboUserLog.PropertyNames.ComboUserID;
					ht[UserName] = _ComboUserLog.PropertyNames.UserName;
					ht[DisplayName] = _ComboUserLog.PropertyNames.DisplayName;
					ht[Email] = _ComboUserLog.PropertyNames.Email;
					ht[BirthDate] = _ComboUserLog.PropertyNames.BirthDate;
					ht[Bio] = _ComboUserLog.PropertyNames.Bio;
					ht[CountryID] = _ComboUserLog.PropertyNames.CountryID;
					ht[UserRankID] = _ComboUserLog.PropertyNames.UserRankID;
					ht[Phone] = _ComboUserLog.PropertyNames.Phone;
					ht[Website] = _ComboUserLog.PropertyNames.Website;
					ht[LogDate] = _ComboUserLog.PropertyNames.LogDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ComboUserLogID = "ComboUserLogID";
            public const string ComboUserID = "ComboUserID";
            public const string UserName = "UserName";
            public const string DisplayName = "DisplayName";
            public const string Email = "Email";
            public const string BirthDate = "BirthDate";
            public const string Bio = "Bio";
            public const string CountryID = "CountryID";
            public const string UserRankID = "UserRankID";
            public const string Phone = "Phone";
            public const string Website = "Website";
            public const string LogDate = "LogDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ComboUserLogID] = _ComboUserLog.ColumnNames.ComboUserLogID;
					ht[ComboUserID] = _ComboUserLog.ColumnNames.ComboUserID;
					ht[UserName] = _ComboUserLog.ColumnNames.UserName;
					ht[DisplayName] = _ComboUserLog.ColumnNames.DisplayName;
					ht[Email] = _ComboUserLog.ColumnNames.Email;
					ht[BirthDate] = _ComboUserLog.ColumnNames.BirthDate;
					ht[Bio] = _ComboUserLog.ColumnNames.Bio;
					ht[CountryID] = _ComboUserLog.ColumnNames.CountryID;
					ht[UserRankID] = _ComboUserLog.ColumnNames.UserRankID;
					ht[Phone] = _ComboUserLog.ColumnNames.Phone;
					ht[Website] = _ComboUserLog.ColumnNames.Website;
					ht[LogDate] = _ComboUserLog.ColumnNames.LogDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ComboUserLogID = "s_ComboUserLogID";
            public const string ComboUserID = "s_ComboUserID";
            public const string UserName = "s_UserName";
            public const string DisplayName = "s_DisplayName";
            public const string Email = "s_Email";
            public const string BirthDate = "s_BirthDate";
            public const string Bio = "s_Bio";
            public const string CountryID = "s_CountryID";
            public const string UserRankID = "s_UserRankID";
            public const string Phone = "s_Phone";
            public const string Website = "s_Website";
            public const string LogDate = "s_LogDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ComboUserLogID
	    {
			get
	        {
				return base.Getint(ColumnNames.ComboUserLogID);
			}
			set
	        {
				base.Setint(ColumnNames.ComboUserLogID, value);
			}
		}

		public virtual int ComboUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.ComboUserID);
			}
			set
	        {
				base.Setint(ColumnNames.ComboUserID, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}

		public virtual string DisplayName
	    {
			get
	        {
				return base.Getstring(ColumnNames.DisplayName);
			}
			set
	        {
				base.Setstring(ColumnNames.DisplayName, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual DateTime BirthDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BirthDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BirthDate, value);
			}
		}

		public virtual string Bio
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bio);
			}
			set
	        {
				base.Setstring(ColumnNames.Bio, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual int UserRankID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserRankID);
			}
			set
	        {
				base.Setint(ColumnNames.UserRankID, value);
			}
		}

		public virtual string Phone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone, value);
			}
		}

		public virtual string Website
	    {
			get
	        {
				return base.Getstring(ColumnNames.Website);
			}
			set
	        {
				base.Setstring(ColumnNames.Website, value);
			}
		}

		public virtual DateTime LogDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LogDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LogDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ComboUserLogID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ComboUserLogID) ? string.Empty : base.GetintAsString(ColumnNames.ComboUserLogID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ComboUserLogID);
				else
					this.ComboUserLogID = base.SetintAsString(ColumnNames.ComboUserLogID, value);
			}
		}

		public virtual string s_ComboUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ComboUserID) ? string.Empty : base.GetintAsString(ColumnNames.ComboUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ComboUserID);
				else
					this.ComboUserID = base.SetintAsString(ColumnNames.ComboUserID, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}

		public virtual string s_DisplayName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DisplayName) ? string.Empty : base.GetstringAsString(ColumnNames.DisplayName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DisplayName);
				else
					this.DisplayName = base.SetstringAsString(ColumnNames.DisplayName, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_BirthDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BirthDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthDate);
				else
					this.BirthDate = base.SetDateTimeAsString(ColumnNames.BirthDate, value);
			}
		}

		public virtual string s_Bio
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bio) ? string.Empty : base.GetstringAsString(ColumnNames.Bio);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bio);
				else
					this.Bio = base.SetstringAsString(ColumnNames.Bio, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_UserRankID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserRankID) ? string.Empty : base.GetintAsString(ColumnNames.UserRankID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserRankID);
				else
					this.UserRankID = base.SetintAsString(ColumnNames.UserRankID, value);
			}
		}

		public virtual string s_Phone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone) ? string.Empty : base.GetstringAsString(ColumnNames.Phone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone);
				else
					this.Phone = base.SetstringAsString(ColumnNames.Phone, value);
			}
		}

		public virtual string s_Website
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Website) ? string.Empty : base.GetstringAsString(ColumnNames.Website);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Website);
				else
					this.Website = base.SetstringAsString(ColumnNames.Website, value);
			}
		}

		public virtual string s_LogDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LogDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogDate);
				else
					this.LogDate = base.SetDateTimeAsString(ColumnNames.LogDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ComboUserLogID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ComboUserLogID, Parameters.ComboUserLogID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ComboUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ComboUserID, Parameters.ComboUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DisplayName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DisplayName, Parameters.DisplayName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bio
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bio, Parameters.Bio);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserRankID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserRankID, Parameters.UserRankID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone, Parameters.Phone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Website
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LogDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogDate, Parameters.LogDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ComboUserLogID
		    {
				get
		        {
					if(_ComboUserLogID_W == null)
	        	    {
						_ComboUserLogID_W = TearOff.ComboUserLogID;
					}
					return _ComboUserLogID_W;
				}
			}

			public WhereParameter ComboUserID
		    {
				get
		        {
					if(_ComboUserID_W == null)
	        	    {
						_ComboUserID_W = TearOff.ComboUserID;
					}
					return _ComboUserID_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public WhereParameter DisplayName
		    {
				get
		        {
					if(_DisplayName_W == null)
	        	    {
						_DisplayName_W = TearOff.DisplayName;
					}
					return _DisplayName_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public WhereParameter Bio
		    {
				get
		        {
					if(_Bio_W == null)
	        	    {
						_Bio_W = TearOff.Bio;
					}
					return _Bio_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter UserRankID
		    {
				get
		        {
					if(_UserRankID_W == null)
	        	    {
						_UserRankID_W = TearOff.UserRankID;
					}
					return _UserRankID_W;
				}
			}

			public WhereParameter Phone
		    {
				get
		        {
					if(_Phone_W == null)
	        	    {
						_Phone_W = TearOff.Phone;
					}
					return _Phone_W;
				}
			}

			public WhereParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public WhereParameter LogDate
		    {
				get
		        {
					if(_LogDate_W == null)
	        	    {
						_LogDate_W = TearOff.LogDate;
					}
					return _LogDate_W;
				}
			}

			private WhereParameter _ComboUserLogID_W = null;
			private WhereParameter _ComboUserID_W = null;
			private WhereParameter _UserName_W = null;
			private WhereParameter _DisplayName_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _BirthDate_W = null;
			private WhereParameter _Bio_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _UserRankID_W = null;
			private WhereParameter _Phone_W = null;
			private WhereParameter _Website_W = null;
			private WhereParameter _LogDate_W = null;

			public void WhereClauseReset()
			{
				_ComboUserLogID_W = null;
				_ComboUserID_W = null;
				_UserName_W = null;
				_DisplayName_W = null;
				_Email_W = null;
				_BirthDate_W = null;
				_Bio_W = null;
				_CountryID_W = null;
				_UserRankID_W = null;
				_Phone_W = null;
				_Website_W = null;
				_LogDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ComboUserLogID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ComboUserLogID, Parameters.ComboUserLogID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ComboUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ComboUserID, Parameters.ComboUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DisplayName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DisplayName, Parameters.DisplayName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bio
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bio, Parameters.Bio);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserRankID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserRankID, Parameters.UserRankID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone, Parameters.Phone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Website
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LogDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogDate, Parameters.LogDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ComboUserLogID
		    {
				get
		        {
					if(_ComboUserLogID_W == null)
	        	    {
						_ComboUserLogID_W = TearOff.ComboUserLogID;
					}
					return _ComboUserLogID_W;
				}
			}

			public AggregateParameter ComboUserID
		    {
				get
		        {
					if(_ComboUserID_W == null)
	        	    {
						_ComboUserID_W = TearOff.ComboUserID;
					}
					return _ComboUserID_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public AggregateParameter DisplayName
		    {
				get
		        {
					if(_DisplayName_W == null)
	        	    {
						_DisplayName_W = TearOff.DisplayName;
					}
					return _DisplayName_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public AggregateParameter Bio
		    {
				get
		        {
					if(_Bio_W == null)
	        	    {
						_Bio_W = TearOff.Bio;
					}
					return _Bio_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter UserRankID
		    {
				get
		        {
					if(_UserRankID_W == null)
	        	    {
						_UserRankID_W = TearOff.UserRankID;
					}
					return _UserRankID_W;
				}
			}

			public AggregateParameter Phone
		    {
				get
		        {
					if(_Phone_W == null)
	        	    {
						_Phone_W = TearOff.Phone;
					}
					return _Phone_W;
				}
			}

			public AggregateParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public AggregateParameter LogDate
		    {
				get
		        {
					if(_LogDate_W == null)
	        	    {
						_LogDate_W = TearOff.LogDate;
					}
					return _LogDate_W;
				}
			}

			private AggregateParameter _ComboUserLogID_W = null;
			private AggregateParameter _ComboUserID_W = null;
			private AggregateParameter _UserName_W = null;
			private AggregateParameter _DisplayName_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _BirthDate_W = null;
			private AggregateParameter _Bio_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _UserRankID_W = null;
			private AggregateParameter _Phone_W = null;
			private AggregateParameter _Website_W = null;
			private AggregateParameter _LogDate_W = null;

			public void AggregateClauseReset()
			{
				_ComboUserLogID_W = null;
				_ComboUserID_W = null;
				_UserName_W = null;
				_DisplayName_W = null;
				_Email_W = null;
				_BirthDate_W = null;
				_Bio_W = null;
				_CountryID_W = null;
				_UserRankID_W = null;
				_Phone_W = null;
				_Website_W = null;
				_LogDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ComboUserLogInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ComboUserLogID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ComboUserLogUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ComboUserLogDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ComboUserLogID);
			p.SourceColumn = ColumnNames.ComboUserLogID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ComboUserLogID);
			p.SourceColumn = ColumnNames.ComboUserLogID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ComboUserID);
			p.SourceColumn = ColumnNames.ComboUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserName);
			p.SourceColumn = ColumnNames.UserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DisplayName);
			p.SourceColumn = ColumnNames.DisplayName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthDate);
			p.SourceColumn = ColumnNames.BirthDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bio);
			p.SourceColumn = ColumnNames.Bio;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserRankID);
			p.SourceColumn = ColumnNames.UserRankID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone);
			p.SourceColumn = ColumnNames.Phone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Website);
			p.SourceColumn = ColumnNames.Website;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LogDate);
			p.SourceColumn = ColumnNames.LogDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
