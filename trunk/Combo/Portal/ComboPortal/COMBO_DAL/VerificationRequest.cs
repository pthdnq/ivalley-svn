
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace COMBO_DAL
{
	public abstract class _VerificationRequest : SqlClientEntity
	{
		public _VerificationRequest()
		{
			this.QuerySource = "VerificationRequest";
			this.MappingName = "VerificationRequest";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VerificationRequestLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int VerificationRequestID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.VerificationRequestID, VerificationRequestID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VerificationRequestLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter VerificationRequestID
			{
				get
				{
					return new SqlParameter("@VerificationRequestID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ComboUserID
			{
				get
				{
					return new SqlParameter("@ComboUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter PassportNo
			{
				get
				{
					return new SqlParameter("@PassportNo", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter DateOfBirth
			{
				get
				{
					return new SqlParameter("@DateOfBirth", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter GenderID
			{
				get
				{
					return new SqlParameter("@GenderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MobileNo
			{
				get
				{
					return new SqlParameter("@MobileNo", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter MobileNo2
			{
				get
				{
					return new SqlParameter("@MobileNo2", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter AccountName
			{
				get
				{
					return new SqlParameter("@AccountName", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter PassportPicPath
			{
				get
				{
					return new SqlParameter("@PassportPicPath", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PersonalPicPath
			{
				get
				{
					return new SqlParameter("@PersonalPicPath", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter IsAccepted
			{
				get
				{
					return new SqlParameter("@IsAccepted", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter RequestDate
			{
				get
				{
					return new SqlParameter("@RequestDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter StatusDate
			{
				get
				{
					return new SqlParameter("@StatusDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ReviewerName
			{
				get
				{
					return new SqlParameter("@ReviewerName", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter RequestTypeID
			{
				get
				{
					return new SqlParameter("@RequestTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter City
			{
				get
				{
					return new SqlParameter("@City", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Info
			{
				get
				{
					return new SqlParameter("@Info", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Activity
			{
				get
				{
					return new SqlParameter("@Activity", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string VerificationRequestID = "VerificationRequestID";
            public const string ComboUserID = "ComboUserID";
            public const string Name = "Name";
            public const string PassportNo = "PassportNo";
            public const string DateOfBirth = "DateOfBirth";
            public const string GenderID = "GenderID";
            public const string CountryID = "CountryID";
            public const string MobileNo = "MobileNo";
            public const string MobileNo2 = "MobileNo2";
            public const string AccountName = "AccountName";
            public const string Email = "Email";
            public const string PassportPicPath = "PassportPicPath";
            public const string PersonalPicPath = "PersonalPicPath";
            public const string IsAccepted = "IsAccepted";
            public const string Description = "Description";
            public const string RequestDate = "RequestDate";
            public const string StatusDate = "StatusDate";
            public const string ReviewerName = "ReviewerName";
            public const string RequestTypeID = "RequestTypeID";
            public const string City = "City";
            public const string Info = "Info";
            public const string Activity = "Activity";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[VerificationRequestID] = _VerificationRequest.PropertyNames.VerificationRequestID;
					ht[ComboUserID] = _VerificationRequest.PropertyNames.ComboUserID;
					ht[Name] = _VerificationRequest.PropertyNames.Name;
					ht[PassportNo] = _VerificationRequest.PropertyNames.PassportNo;
					ht[DateOfBirth] = _VerificationRequest.PropertyNames.DateOfBirth;
					ht[GenderID] = _VerificationRequest.PropertyNames.GenderID;
					ht[CountryID] = _VerificationRequest.PropertyNames.CountryID;
					ht[MobileNo] = _VerificationRequest.PropertyNames.MobileNo;
					ht[MobileNo2] = _VerificationRequest.PropertyNames.MobileNo2;
					ht[AccountName] = _VerificationRequest.PropertyNames.AccountName;
					ht[Email] = _VerificationRequest.PropertyNames.Email;
					ht[PassportPicPath] = _VerificationRequest.PropertyNames.PassportPicPath;
					ht[PersonalPicPath] = _VerificationRequest.PropertyNames.PersonalPicPath;
					ht[IsAccepted] = _VerificationRequest.PropertyNames.IsAccepted;
					ht[Description] = _VerificationRequest.PropertyNames.Description;
					ht[RequestDate] = _VerificationRequest.PropertyNames.RequestDate;
					ht[StatusDate] = _VerificationRequest.PropertyNames.StatusDate;
					ht[ReviewerName] = _VerificationRequest.PropertyNames.ReviewerName;
					ht[RequestTypeID] = _VerificationRequest.PropertyNames.RequestTypeID;
					ht[City] = _VerificationRequest.PropertyNames.City;
					ht[Info] = _VerificationRequest.PropertyNames.Info;
					ht[Activity] = _VerificationRequest.PropertyNames.Activity;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string VerificationRequestID = "VerificationRequestID";
            public const string ComboUserID = "ComboUserID";
            public const string Name = "Name";
            public const string PassportNo = "PassportNo";
            public const string DateOfBirth = "DateOfBirth";
            public const string GenderID = "GenderID";
            public const string CountryID = "CountryID";
            public const string MobileNo = "MobileNo";
            public const string MobileNo2 = "MobileNo2";
            public const string AccountName = "AccountName";
            public const string Email = "Email";
            public const string PassportPicPath = "PassportPicPath";
            public const string PersonalPicPath = "PersonalPicPath";
            public const string IsAccepted = "IsAccepted";
            public const string Description = "Description";
            public const string RequestDate = "RequestDate";
            public const string StatusDate = "StatusDate";
            public const string ReviewerName = "ReviewerName";
            public const string RequestTypeID = "RequestTypeID";
            public const string City = "City";
            public const string Info = "Info";
            public const string Activity = "Activity";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[VerificationRequestID] = _VerificationRequest.ColumnNames.VerificationRequestID;
					ht[ComboUserID] = _VerificationRequest.ColumnNames.ComboUserID;
					ht[Name] = _VerificationRequest.ColumnNames.Name;
					ht[PassportNo] = _VerificationRequest.ColumnNames.PassportNo;
					ht[DateOfBirth] = _VerificationRequest.ColumnNames.DateOfBirth;
					ht[GenderID] = _VerificationRequest.ColumnNames.GenderID;
					ht[CountryID] = _VerificationRequest.ColumnNames.CountryID;
					ht[MobileNo] = _VerificationRequest.ColumnNames.MobileNo;
					ht[MobileNo2] = _VerificationRequest.ColumnNames.MobileNo2;
					ht[AccountName] = _VerificationRequest.ColumnNames.AccountName;
					ht[Email] = _VerificationRequest.ColumnNames.Email;
					ht[PassportPicPath] = _VerificationRequest.ColumnNames.PassportPicPath;
					ht[PersonalPicPath] = _VerificationRequest.ColumnNames.PersonalPicPath;
					ht[IsAccepted] = _VerificationRequest.ColumnNames.IsAccepted;
					ht[Description] = _VerificationRequest.ColumnNames.Description;
					ht[RequestDate] = _VerificationRequest.ColumnNames.RequestDate;
					ht[StatusDate] = _VerificationRequest.ColumnNames.StatusDate;
					ht[ReviewerName] = _VerificationRequest.ColumnNames.ReviewerName;
					ht[RequestTypeID] = _VerificationRequest.ColumnNames.RequestTypeID;
					ht[City] = _VerificationRequest.ColumnNames.City;
					ht[Info] = _VerificationRequest.ColumnNames.Info;
					ht[Activity] = _VerificationRequest.ColumnNames.Activity;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string VerificationRequestID = "s_VerificationRequestID";
            public const string ComboUserID = "s_ComboUserID";
            public const string Name = "s_Name";
            public const string PassportNo = "s_PassportNo";
            public const string DateOfBirth = "s_DateOfBirth";
            public const string GenderID = "s_GenderID";
            public const string CountryID = "s_CountryID";
            public const string MobileNo = "s_MobileNo";
            public const string MobileNo2 = "s_MobileNo2";
            public const string AccountName = "s_AccountName";
            public const string Email = "s_Email";
            public const string PassportPicPath = "s_PassportPicPath";
            public const string PersonalPicPath = "s_PersonalPicPath";
            public const string IsAccepted = "s_IsAccepted";
            public const string Description = "s_Description";
            public const string RequestDate = "s_RequestDate";
            public const string StatusDate = "s_StatusDate";
            public const string ReviewerName = "s_ReviewerName";
            public const string RequestTypeID = "s_RequestTypeID";
            public const string City = "s_City";
            public const string Info = "s_Info";
            public const string Activity = "s_Activity";

		}
		#endregion		
		
		#region Properties
	
		public virtual int VerificationRequestID
	    {
			get
	        {
				return base.Getint(ColumnNames.VerificationRequestID);
			}
			set
	        {
				base.Setint(ColumnNames.VerificationRequestID, value);
			}
		}

		public virtual int ComboUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.ComboUserID);
			}
			set
	        {
				base.Setint(ColumnNames.ComboUserID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string PassportNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.PassportNo);
			}
			set
	        {
				base.Setstring(ColumnNames.PassportNo, value);
			}
		}

		public virtual DateTime DateOfBirth
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateOfBirth);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateOfBirth, value);
			}
		}

		public virtual int GenderID
	    {
			get
	        {
				return base.Getint(ColumnNames.GenderID);
			}
			set
	        {
				base.Setint(ColumnNames.GenderID, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual string MobileNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.MobileNo);
			}
			set
	        {
				base.Setstring(ColumnNames.MobileNo, value);
			}
		}

		public virtual string MobileNo2
	    {
			get
	        {
				return base.Getstring(ColumnNames.MobileNo2);
			}
			set
	        {
				base.Setstring(ColumnNames.MobileNo2, value);
			}
		}

		public virtual string AccountName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AccountName);
			}
			set
	        {
				base.Setstring(ColumnNames.AccountName, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string PassportPicPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.PassportPicPath);
			}
			set
	        {
				base.Setstring(ColumnNames.PassportPicPath, value);
			}
		}

		public virtual string PersonalPicPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.PersonalPicPath);
			}
			set
	        {
				base.Setstring(ColumnNames.PersonalPicPath, value);
			}
		}

		public virtual bool IsAccepted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsAccepted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsAccepted, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual DateTime RequestDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RequestDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RequestDate, value);
			}
		}

		public virtual DateTime StatusDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StatusDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StatusDate, value);
			}
		}

		public virtual string ReviewerName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ReviewerName);
			}
			set
	        {
				base.Setstring(ColumnNames.ReviewerName, value);
			}
		}

		public virtual int RequestTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.RequestTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.RequestTypeID, value);
			}
		}

		public virtual string City
	    {
			get
	        {
				return base.Getstring(ColumnNames.City);
			}
			set
	        {
				base.Setstring(ColumnNames.City, value);
			}
		}

		public virtual string Info
	    {
			get
	        {
				return base.Getstring(ColumnNames.Info);
			}
			set
	        {
				base.Setstring(ColumnNames.Info, value);
			}
		}

		public virtual string Activity
	    {
			get
	        {
				return base.Getstring(ColumnNames.Activity);
			}
			set
	        {
				base.Setstring(ColumnNames.Activity, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_VerificationRequestID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VerificationRequestID) ? string.Empty : base.GetintAsString(ColumnNames.VerificationRequestID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VerificationRequestID);
				else
					this.VerificationRequestID = base.SetintAsString(ColumnNames.VerificationRequestID, value);
			}
		}

		public virtual string s_ComboUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ComboUserID) ? string.Empty : base.GetintAsString(ColumnNames.ComboUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ComboUserID);
				else
					this.ComboUserID = base.SetintAsString(ColumnNames.ComboUserID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_PassportNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PassportNo) ? string.Empty : base.GetstringAsString(ColumnNames.PassportNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PassportNo);
				else
					this.PassportNo = base.SetstringAsString(ColumnNames.PassportNo, value);
			}
		}

		public virtual string s_DateOfBirth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateOfBirth) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfBirth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateOfBirth);
				else
					this.DateOfBirth = base.SetDateTimeAsString(ColumnNames.DateOfBirth, value);
			}
		}

		public virtual string s_GenderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenderID) ? string.Empty : base.GetintAsString(ColumnNames.GenderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenderID);
				else
					this.GenderID = base.SetintAsString(ColumnNames.GenderID, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_MobileNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MobileNo) ? string.Empty : base.GetstringAsString(ColumnNames.MobileNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MobileNo);
				else
					this.MobileNo = base.SetstringAsString(ColumnNames.MobileNo, value);
			}
		}

		public virtual string s_MobileNo2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MobileNo2) ? string.Empty : base.GetstringAsString(ColumnNames.MobileNo2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MobileNo2);
				else
					this.MobileNo2 = base.SetstringAsString(ColumnNames.MobileNo2, value);
			}
		}

		public virtual string s_AccountName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AccountName) ? string.Empty : base.GetstringAsString(ColumnNames.AccountName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AccountName);
				else
					this.AccountName = base.SetstringAsString(ColumnNames.AccountName, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_PassportPicPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PassportPicPath) ? string.Empty : base.GetstringAsString(ColumnNames.PassportPicPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PassportPicPath);
				else
					this.PassportPicPath = base.SetstringAsString(ColumnNames.PassportPicPath, value);
			}
		}

		public virtual string s_PersonalPicPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PersonalPicPath) ? string.Empty : base.GetstringAsString(ColumnNames.PersonalPicPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PersonalPicPath);
				else
					this.PersonalPicPath = base.SetstringAsString(ColumnNames.PersonalPicPath, value);
			}
		}

		public virtual string s_IsAccepted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsAccepted) ? string.Empty : base.GetboolAsString(ColumnNames.IsAccepted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsAccepted);
				else
					this.IsAccepted = base.SetboolAsString(ColumnNames.IsAccepted, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_RequestDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RequestDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestDate);
				else
					this.RequestDate = base.SetDateTimeAsString(ColumnNames.RequestDate, value);
			}
		}

		public virtual string s_StatusDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StatusDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusDate);
				else
					this.StatusDate = base.SetDateTimeAsString(ColumnNames.StatusDate, value);
			}
		}

		public virtual string s_ReviewerName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReviewerName) ? string.Empty : base.GetstringAsString(ColumnNames.ReviewerName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReviewerName);
				else
					this.ReviewerName = base.SetstringAsString(ColumnNames.ReviewerName, value);
			}
		}

		public virtual string s_RequestTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestTypeID) ? string.Empty : base.GetintAsString(ColumnNames.RequestTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestTypeID);
				else
					this.RequestTypeID = base.SetintAsString(ColumnNames.RequestTypeID, value);
			}
		}

		public virtual string s_City
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.City) ? string.Empty : base.GetstringAsString(ColumnNames.City);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.City);
				else
					this.City = base.SetstringAsString(ColumnNames.City, value);
			}
		}

		public virtual string s_Info
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Info) ? string.Empty : base.GetstringAsString(ColumnNames.Info);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Info);
				else
					this.Info = base.SetstringAsString(ColumnNames.Info, value);
			}
		}

		public virtual string s_Activity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Activity) ? string.Empty : base.GetstringAsString(ColumnNames.Activity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Activity);
				else
					this.Activity = base.SetstringAsString(ColumnNames.Activity, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter VerificationRequestID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VerificationRequestID, Parameters.VerificationRequestID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ComboUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ComboUserID, Parameters.ComboUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PassportNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PassportNo, Parameters.PassportNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateOfBirth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateOfBirth, Parameters.DateOfBirth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MobileNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MobileNo, Parameters.MobileNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MobileNo2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MobileNo2, Parameters.MobileNo2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AccountName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AccountName, Parameters.AccountName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PassportPicPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PassportPicPath, Parameters.PassportPicPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PersonalPicPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PersonalPicPath, Parameters.PersonalPicPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsAccepted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsAccepted, Parameters.IsAccepted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestDate, Parameters.RequestDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StatusDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusDate, Parameters.StatusDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReviewerName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReviewerName, Parameters.ReviewerName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestTypeID, Parameters.RequestTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter City
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Info
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Info, Parameters.Info);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Activity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Activity, Parameters.Activity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter VerificationRequestID
		    {
				get
		        {
					if(_VerificationRequestID_W == null)
	        	    {
						_VerificationRequestID_W = TearOff.VerificationRequestID;
					}
					return _VerificationRequestID_W;
				}
			}

			public WhereParameter ComboUserID
		    {
				get
		        {
					if(_ComboUserID_W == null)
	        	    {
						_ComboUserID_W = TearOff.ComboUserID;
					}
					return _ComboUserID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter PassportNo
		    {
				get
		        {
					if(_PassportNo_W == null)
	        	    {
						_PassportNo_W = TearOff.PassportNo;
					}
					return _PassportNo_W;
				}
			}

			public WhereParameter DateOfBirth
		    {
				get
		        {
					if(_DateOfBirth_W == null)
	        	    {
						_DateOfBirth_W = TearOff.DateOfBirth;
					}
					return _DateOfBirth_W;
				}
			}

			public WhereParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter MobileNo
		    {
				get
		        {
					if(_MobileNo_W == null)
	        	    {
						_MobileNo_W = TearOff.MobileNo;
					}
					return _MobileNo_W;
				}
			}

			public WhereParameter MobileNo2
		    {
				get
		        {
					if(_MobileNo2_W == null)
	        	    {
						_MobileNo2_W = TearOff.MobileNo2;
					}
					return _MobileNo2_W;
				}
			}

			public WhereParameter AccountName
		    {
				get
		        {
					if(_AccountName_W == null)
	        	    {
						_AccountName_W = TearOff.AccountName;
					}
					return _AccountName_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter PassportPicPath
		    {
				get
		        {
					if(_PassportPicPath_W == null)
	        	    {
						_PassportPicPath_W = TearOff.PassportPicPath;
					}
					return _PassportPicPath_W;
				}
			}

			public WhereParameter PersonalPicPath
		    {
				get
		        {
					if(_PersonalPicPath_W == null)
	        	    {
						_PersonalPicPath_W = TearOff.PersonalPicPath;
					}
					return _PersonalPicPath_W;
				}
			}

			public WhereParameter IsAccepted
		    {
				get
		        {
					if(_IsAccepted_W == null)
	        	    {
						_IsAccepted_W = TearOff.IsAccepted;
					}
					return _IsAccepted_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter RequestDate
		    {
				get
		        {
					if(_RequestDate_W == null)
	        	    {
						_RequestDate_W = TearOff.RequestDate;
					}
					return _RequestDate_W;
				}
			}

			public WhereParameter StatusDate
		    {
				get
		        {
					if(_StatusDate_W == null)
	        	    {
						_StatusDate_W = TearOff.StatusDate;
					}
					return _StatusDate_W;
				}
			}

			public WhereParameter ReviewerName
		    {
				get
		        {
					if(_ReviewerName_W == null)
	        	    {
						_ReviewerName_W = TearOff.ReviewerName;
					}
					return _ReviewerName_W;
				}
			}

			public WhereParameter RequestTypeID
		    {
				get
		        {
					if(_RequestTypeID_W == null)
	        	    {
						_RequestTypeID_W = TearOff.RequestTypeID;
					}
					return _RequestTypeID_W;
				}
			}

			public WhereParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public WhereParameter Info
		    {
				get
		        {
					if(_Info_W == null)
	        	    {
						_Info_W = TearOff.Info;
					}
					return _Info_W;
				}
			}

			public WhereParameter Activity
		    {
				get
		        {
					if(_Activity_W == null)
	        	    {
						_Activity_W = TearOff.Activity;
					}
					return _Activity_W;
				}
			}

			private WhereParameter _VerificationRequestID_W = null;
			private WhereParameter _ComboUserID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _PassportNo_W = null;
			private WhereParameter _DateOfBirth_W = null;
			private WhereParameter _GenderID_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _MobileNo_W = null;
			private WhereParameter _MobileNo2_W = null;
			private WhereParameter _AccountName_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _PassportPicPath_W = null;
			private WhereParameter _PersonalPicPath_W = null;
			private WhereParameter _IsAccepted_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _RequestDate_W = null;
			private WhereParameter _StatusDate_W = null;
			private WhereParameter _ReviewerName_W = null;
			private WhereParameter _RequestTypeID_W = null;
			private WhereParameter _City_W = null;
			private WhereParameter _Info_W = null;
			private WhereParameter _Activity_W = null;

			public void WhereClauseReset()
			{
				_VerificationRequestID_W = null;
				_ComboUserID_W = null;
				_Name_W = null;
				_PassportNo_W = null;
				_DateOfBirth_W = null;
				_GenderID_W = null;
				_CountryID_W = null;
				_MobileNo_W = null;
				_MobileNo2_W = null;
				_AccountName_W = null;
				_Email_W = null;
				_PassportPicPath_W = null;
				_PersonalPicPath_W = null;
				_IsAccepted_W = null;
				_Description_W = null;
				_RequestDate_W = null;
				_StatusDate_W = null;
				_ReviewerName_W = null;
				_RequestTypeID_W = null;
				_City_W = null;
				_Info_W = null;
				_Activity_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter VerificationRequestID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VerificationRequestID, Parameters.VerificationRequestID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ComboUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ComboUserID, Parameters.ComboUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PassportNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PassportNo, Parameters.PassportNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateOfBirth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfBirth, Parameters.DateOfBirth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MobileNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MobileNo, Parameters.MobileNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MobileNo2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MobileNo2, Parameters.MobileNo2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AccountName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AccountName, Parameters.AccountName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PassportPicPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PassportPicPath, Parameters.PassportPicPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PersonalPicPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PersonalPicPath, Parameters.PersonalPicPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsAccepted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsAccepted, Parameters.IsAccepted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestDate, Parameters.RequestDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StatusDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusDate, Parameters.StatusDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReviewerName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReviewerName, Parameters.ReviewerName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestTypeID, Parameters.RequestTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter City
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Info
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Info, Parameters.Info);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Activity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Activity, Parameters.Activity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter VerificationRequestID
		    {
				get
		        {
					if(_VerificationRequestID_W == null)
	        	    {
						_VerificationRequestID_W = TearOff.VerificationRequestID;
					}
					return _VerificationRequestID_W;
				}
			}

			public AggregateParameter ComboUserID
		    {
				get
		        {
					if(_ComboUserID_W == null)
	        	    {
						_ComboUserID_W = TearOff.ComboUserID;
					}
					return _ComboUserID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter PassportNo
		    {
				get
		        {
					if(_PassportNo_W == null)
	        	    {
						_PassportNo_W = TearOff.PassportNo;
					}
					return _PassportNo_W;
				}
			}

			public AggregateParameter DateOfBirth
		    {
				get
		        {
					if(_DateOfBirth_W == null)
	        	    {
						_DateOfBirth_W = TearOff.DateOfBirth;
					}
					return _DateOfBirth_W;
				}
			}

			public AggregateParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter MobileNo
		    {
				get
		        {
					if(_MobileNo_W == null)
	        	    {
						_MobileNo_W = TearOff.MobileNo;
					}
					return _MobileNo_W;
				}
			}

			public AggregateParameter MobileNo2
		    {
				get
		        {
					if(_MobileNo2_W == null)
	        	    {
						_MobileNo2_W = TearOff.MobileNo2;
					}
					return _MobileNo2_W;
				}
			}

			public AggregateParameter AccountName
		    {
				get
		        {
					if(_AccountName_W == null)
	        	    {
						_AccountName_W = TearOff.AccountName;
					}
					return _AccountName_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter PassportPicPath
		    {
				get
		        {
					if(_PassportPicPath_W == null)
	        	    {
						_PassportPicPath_W = TearOff.PassportPicPath;
					}
					return _PassportPicPath_W;
				}
			}

			public AggregateParameter PersonalPicPath
		    {
				get
		        {
					if(_PersonalPicPath_W == null)
	        	    {
						_PersonalPicPath_W = TearOff.PersonalPicPath;
					}
					return _PersonalPicPath_W;
				}
			}

			public AggregateParameter IsAccepted
		    {
				get
		        {
					if(_IsAccepted_W == null)
	        	    {
						_IsAccepted_W = TearOff.IsAccepted;
					}
					return _IsAccepted_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter RequestDate
		    {
				get
		        {
					if(_RequestDate_W == null)
	        	    {
						_RequestDate_W = TearOff.RequestDate;
					}
					return _RequestDate_W;
				}
			}

			public AggregateParameter StatusDate
		    {
				get
		        {
					if(_StatusDate_W == null)
	        	    {
						_StatusDate_W = TearOff.StatusDate;
					}
					return _StatusDate_W;
				}
			}

			public AggregateParameter ReviewerName
		    {
				get
		        {
					if(_ReviewerName_W == null)
	        	    {
						_ReviewerName_W = TearOff.ReviewerName;
					}
					return _ReviewerName_W;
				}
			}

			public AggregateParameter RequestTypeID
		    {
				get
		        {
					if(_RequestTypeID_W == null)
	        	    {
						_RequestTypeID_W = TearOff.RequestTypeID;
					}
					return _RequestTypeID_W;
				}
			}

			public AggregateParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public AggregateParameter Info
		    {
				get
		        {
					if(_Info_W == null)
	        	    {
						_Info_W = TearOff.Info;
					}
					return _Info_W;
				}
			}

			public AggregateParameter Activity
		    {
				get
		        {
					if(_Activity_W == null)
	        	    {
						_Activity_W = TearOff.Activity;
					}
					return _Activity_W;
				}
			}

			private AggregateParameter _VerificationRequestID_W = null;
			private AggregateParameter _ComboUserID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _PassportNo_W = null;
			private AggregateParameter _DateOfBirth_W = null;
			private AggregateParameter _GenderID_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _MobileNo_W = null;
			private AggregateParameter _MobileNo2_W = null;
			private AggregateParameter _AccountName_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _PassportPicPath_W = null;
			private AggregateParameter _PersonalPicPath_W = null;
			private AggregateParameter _IsAccepted_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _RequestDate_W = null;
			private AggregateParameter _StatusDate_W = null;
			private AggregateParameter _ReviewerName_W = null;
			private AggregateParameter _RequestTypeID_W = null;
			private AggregateParameter _City_W = null;
			private AggregateParameter _Info_W = null;
			private AggregateParameter _Activity_W = null;

			public void AggregateClauseReset()
			{
				_VerificationRequestID_W = null;
				_ComboUserID_W = null;
				_Name_W = null;
				_PassportNo_W = null;
				_DateOfBirth_W = null;
				_GenderID_W = null;
				_CountryID_W = null;
				_MobileNo_W = null;
				_MobileNo2_W = null;
				_AccountName_W = null;
				_Email_W = null;
				_PassportPicPath_W = null;
				_PersonalPicPath_W = null;
				_IsAccepted_W = null;
				_Description_W = null;
				_RequestDate_W = null;
				_StatusDate_W = null;
				_ReviewerName_W = null;
				_RequestTypeID_W = null;
				_City_W = null;
				_Info_W = null;
				_Activity_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VerificationRequestInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.VerificationRequestID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VerificationRequestUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VerificationRequestDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.VerificationRequestID);
			p.SourceColumn = ColumnNames.VerificationRequestID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.VerificationRequestID);
			p.SourceColumn = ColumnNames.VerificationRequestID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ComboUserID);
			p.SourceColumn = ColumnNames.ComboUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PassportNo);
			p.SourceColumn = ColumnNames.PassportNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateOfBirth);
			p.SourceColumn = ColumnNames.DateOfBirth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GenderID);
			p.SourceColumn = ColumnNames.GenderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MobileNo);
			p.SourceColumn = ColumnNames.MobileNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MobileNo2);
			p.SourceColumn = ColumnNames.MobileNo2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AccountName);
			p.SourceColumn = ColumnNames.AccountName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PassportPicPath);
			p.SourceColumn = ColumnNames.PassportPicPath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PersonalPicPath);
			p.SourceColumn = ColumnNames.PersonalPicPath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsAccepted);
			p.SourceColumn = ColumnNames.IsAccepted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestDate);
			p.SourceColumn = ColumnNames.RequestDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StatusDate);
			p.SourceColumn = ColumnNames.StatusDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReviewerName);
			p.SourceColumn = ColumnNames.ReviewerName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestTypeID);
			p.SourceColumn = ColumnNames.RequestTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.City);
			p.SourceColumn = ColumnNames.City;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Info);
			p.SourceColumn = ColumnNames.Info;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Activity);
			p.SourceColumn = ColumnNames.Activity;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
