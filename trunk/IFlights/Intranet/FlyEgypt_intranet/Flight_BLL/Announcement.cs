
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using Flight_DAL;
using System.Collections.Specialized;
using System.Data.SqlClient;
using System.Data;
namespace Flight_BLL
{
	public class Announcement : _Announcement
	{
		public Announcement()
		{
		
		}

        public virtual bool GetAllCirculars(string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllCirculars", parameters);
        }

        public virtual bool GetAllCircularsPublic(string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllCircularsPublic", parameters);
        }

        public virtual bool GetAllCircularsPublicAndGroups(Guid UserID, string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@UserID", SqlDbType.UniqueIdentifier, 0), UserID);
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllCircularsPublicAndGroups", parameters);
        }

        public virtual bool GetAllCircularsGroups(int groupID, string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@groupID", SqlDbType.Int, 0), groupID);
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllCircularsGroups", parameters);
        }
        //--------------------

        public virtual bool GetAllBulletins(string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBulletins", parameters);
        }

        public virtual bool GetAllBulletinsPublic(string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBulletinsPublic", parameters);
        }

        public virtual bool GetAllBulletinsGroups(int groupID, string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@groupID", SqlDbType.Int, 0), groupID);
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBulletinsGroups", parameters);
        }

        public virtual bool GetAllBulletinsPublicAndGroups(Guid UserID, string query,DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@UserID", SqlDbType.UniqueIdentifier, 0), UserID);
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBulletinsPublicAndGroups", parameters);
        }
        //--------------------

        public virtual bool GetTopBulletins(Guid UserID)
        {
            return LoadFromRawSql(@"select top 3 * from (select A.*, U.UserName, U.UserID, 'Public' as Groups from Announcement A 
                                    left join AnnouncementGroup G on A.AnnouncementID = G.AnnouncementID                                                 
                                    Left join aspnet_users U on A.createdby = u.UserID 
                                    where (IsBulletin = 1 ) and                                             
		                                    G.AnnouncementID is null 
                                            and (isDeleted is null or isDeleted <> 1 )

                                    union 

                                    select distinct A.*, U.UserName, U.UserID, 
									Stuff((select ' , ' + GroupName from groups gs left join AnnouncementGroup G on gs.GroupID = G.GroupID where g.AnnouncementID = a.AnnouncementID for XML path('')),1,3,'')                                    
                                    from Announcement A 
                                    left join AnnouncementGroup G2 on A.AnnouncementID = G2.AnnouncementID                                                 
                                    Left join aspnet_users U on A.createdby = u.UserID 
                                    where (IsBulletin = 1 ) and                                             
		                                    G2.GroupID in (select groupid from usergroup where userid = {0})
                                            and (isDeleted is null or isDeleted <> 1 )
                                    ) as a order by CreatedDate desc", UserID);
        }

        public virtual bool GetTopCirculars(Guid UserID)
        {

            return LoadFromRawSql(@"select top 3 * from (select A.*, U.UserName, U.UserID, 'Public' as Groups from Announcement A 
                                    left join AnnouncementGroup G on A.AnnouncementID = G.AnnouncementID                                                 
                                    Left join aspnet_users U on A.createdby = u.UserID 
                                    where (IsBulletin is null or IsBulletin <> 1 ) and 
                                            (IsBlog is null or IsBlog <> 1 ) and
		                                    G.AnnouncementID is null 
                                            and (isDeleted is null or isDeleted <> 1 )

                                    union 

                                    select distinct A.*, U.UserName, U.UserID, 
									Stuff((select ' , ' + GroupName from groups gs left join AnnouncementGroup G on gs.GroupID = G.GroupID where g.AnnouncementID = a.AnnouncementID for XML path('')),1,3,'')                                    
                                    from Announcement A 
                                    left join AnnouncementGroup G2 on A.AnnouncementID = G2.AnnouncementID
                                    Left join aspnet_users U on A.createdby = u.UserID 
                                    where (IsBulletin is null or IsBulletin <> 1 ) and 
                                            (IsBlog is null or IsBlog <> 1 ) and
		                                    G2.GroupID in (select groupid from usergroup where userid = {0})
                                            and (isDeleted is null or isDeleted <> 1 )
                                    ) as a order by CreatedDate desc", UserID);
        }

        public virtual bool GetAllBlogs(string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBlogs", parameters);
        }

        public virtual bool GetAllBlogsPublic(string query ,DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBlogsPublic", parameters);
        }

        public virtual bool GetAllBlogsGroups(int groupID, string query, DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@groupID", SqlDbType.Int, 0), groupID);
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBlogsGroups", parameters);
        }

        public virtual bool GetTopBlogs(Guid UserID)
        {
            return LoadFromRawSql(@"select top 3 * from (select A.*, U.UserName, U.UserID, 'Public' as Groups from Announcement A 
                                    left join AnnouncementGroup G on A.AnnouncementID = G.AnnouncementID                                                 
                                    Left join aspnet_users U on A.createdby = u.UserID 
                                    where  (IsBlog = 1 ) and
		                                    G.AnnouncementID is null 
                                            and (isDeleted is null or isDeleted <> 1 )

                                    union 

                                    select distinct A.*, U.UserName, U.UserID ,
                                    Stuff((select ' , ' + GroupName from groups gs left join AnnouncementGroup G on gs.GroupID = G.GroupID where g.AnnouncementID = a.AnnouncementID for XML path('')),1,3,'')                                    
                                    from Announcement A 
                                    left join AnnouncementGroup G2 on A.AnnouncementID = G2.AnnouncementID                                                 
                                    Left join aspnet_users U on A.createdby = u.UserID 
                                    where (IsBlog = 1 ) and
		                                    G2.GroupID in (select groupid from usergroup where userid = {0})
                                            and (isDeleted is null or isDeleted <> 1 )
                                    ) as a order by CreatedDate desc", UserID);
        }

        public virtual bool GetAllBlogsPublicAndGroups(Guid UserID,string query ,DateTime dateFrom, DateTime dateTo)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(new SqlParameter("@UserID", SqlDbType.UniqueIdentifier, 0), UserID);
            parameters.Add(new SqlParameter("@query", SqlDbType.NVarChar, 50), query);
            parameters.Add(new SqlParameter("@FromDate", SqlDbType.DateTime, 0), dateFrom);
            parameters.Add(new SqlParameter("@ToDate", SqlDbType.DateTime, 0), dateTo);
            return LoadFromSql("GetAllBlogsPublicAndGroups", parameters);
        }
	}
}
