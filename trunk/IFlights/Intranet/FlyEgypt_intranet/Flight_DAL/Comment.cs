
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _Comment : SqlClientEntity
	{
		public _Comment()
		{
			this.QuerySource = "Comment";
			this.MappingName = "Comment";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CommentLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CommentID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CommentID, CommentID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CommentLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CommentID
			{
				get
				{
					return new SqlParameter("@CommentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IssueID
			{
				get
				{
					return new SqlParameter("@IssueID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CommentText
			{
				get
				{
					return new SqlParameter("@CommentText", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter CommentDate
			{
				get
				{
					return new SqlParameter("@CommentDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CommentID = "CommentID";
            public const string IssueID = "IssueID";
            public const string UserID = "UserID";
            public const string CommentText = "CommentText";
            public const string CommentDate = "CommentDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CommentID] = _Comment.PropertyNames.CommentID;
					ht[IssueID] = _Comment.PropertyNames.IssueID;
					ht[UserID] = _Comment.PropertyNames.UserID;
					ht[CommentText] = _Comment.PropertyNames.CommentText;
					ht[CommentDate] = _Comment.PropertyNames.CommentDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CommentID = "CommentID";
            public const string IssueID = "IssueID";
            public const string UserID = "UserID";
            public const string CommentText = "CommentText";
            public const string CommentDate = "CommentDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CommentID] = _Comment.ColumnNames.CommentID;
					ht[IssueID] = _Comment.ColumnNames.IssueID;
					ht[UserID] = _Comment.ColumnNames.UserID;
					ht[CommentText] = _Comment.ColumnNames.CommentText;
					ht[CommentDate] = _Comment.ColumnNames.CommentDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CommentID = "s_CommentID";
            public const string IssueID = "s_IssueID";
            public const string UserID = "s_UserID";
            public const string CommentText = "s_CommentText";
            public const string CommentDate = "s_CommentDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CommentID
	    {
			get
	        {
				return base.Getint(ColumnNames.CommentID);
			}
			set
	        {
				base.Setint(ColumnNames.CommentID, value);
			}
		}

		public virtual int IssueID
	    {
			get
	        {
				return base.Getint(ColumnNames.IssueID);
			}
			set
	        {
				base.Setint(ColumnNames.IssueID, value);
			}
		}

		public virtual Guid UserID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UserID);
			}
			set
	        {
				base.SetGuid(ColumnNames.UserID, value);
			}
		}

		public virtual string CommentText
	    {
			get
	        {
				return base.Getstring(ColumnNames.CommentText);
			}
			set
	        {
				base.Setstring(ColumnNames.CommentText, value);
			}
		}

		public virtual DateTime CommentDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CommentDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CommentDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CommentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommentID) ? string.Empty : base.GetintAsString(ColumnNames.CommentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommentID);
				else
					this.CommentID = base.SetintAsString(ColumnNames.CommentID, value);
			}
		}

		public virtual string s_IssueID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IssueID) ? string.Empty : base.GetintAsString(ColumnNames.IssueID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IssueID);
				else
					this.IssueID = base.SetintAsString(ColumnNames.IssueID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetGuidAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetGuidAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_CommentText
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommentText) ? string.Empty : base.GetstringAsString(ColumnNames.CommentText);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommentText);
				else
					this.CommentText = base.SetstringAsString(ColumnNames.CommentText, value);
			}
		}

		public virtual string s_CommentDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommentDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CommentDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommentDate);
				else
					this.CommentDate = base.SetDateTimeAsString(ColumnNames.CommentDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CommentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommentID, Parameters.CommentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IssueID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IssueID, Parameters.IssueID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommentText
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommentText, Parameters.CommentText);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommentDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommentDate, Parameters.CommentDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CommentID
		    {
				get
		        {
					if(_CommentID_W == null)
	        	    {
						_CommentID_W = TearOff.CommentID;
					}
					return _CommentID_W;
				}
			}

			public WhereParameter IssueID
		    {
				get
		        {
					if(_IssueID_W == null)
	        	    {
						_IssueID_W = TearOff.IssueID;
					}
					return _IssueID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter CommentText
		    {
				get
		        {
					if(_CommentText_W == null)
	        	    {
						_CommentText_W = TearOff.CommentText;
					}
					return _CommentText_W;
				}
			}

			public WhereParameter CommentDate
		    {
				get
		        {
					if(_CommentDate_W == null)
	        	    {
						_CommentDate_W = TearOff.CommentDate;
					}
					return _CommentDate_W;
				}
			}

			private WhereParameter _CommentID_W = null;
			private WhereParameter _IssueID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _CommentText_W = null;
			private WhereParameter _CommentDate_W = null;

			public void WhereClauseReset()
			{
				_CommentID_W = null;
				_IssueID_W = null;
				_UserID_W = null;
				_CommentText_W = null;
				_CommentDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CommentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommentID, Parameters.CommentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IssueID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssueID, Parameters.IssueID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommentText
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommentText, Parameters.CommentText);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommentDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommentDate, Parameters.CommentDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CommentID
		    {
				get
		        {
					if(_CommentID_W == null)
	        	    {
						_CommentID_W = TearOff.CommentID;
					}
					return _CommentID_W;
				}
			}

			public AggregateParameter IssueID
		    {
				get
		        {
					if(_IssueID_W == null)
	        	    {
						_IssueID_W = TearOff.IssueID;
					}
					return _IssueID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter CommentText
		    {
				get
		        {
					if(_CommentText_W == null)
	        	    {
						_CommentText_W = TearOff.CommentText;
					}
					return _CommentText_W;
				}
			}

			public AggregateParameter CommentDate
		    {
				get
		        {
					if(_CommentDate_W == null)
	        	    {
						_CommentDate_W = TearOff.CommentDate;
					}
					return _CommentDate_W;
				}
			}

			private AggregateParameter _CommentID_W = null;
			private AggregateParameter _IssueID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _CommentText_W = null;
			private AggregateParameter _CommentDate_W = null;

			public void AggregateClauseReset()
			{
				_CommentID_W = null;
				_IssueID_W = null;
				_UserID_W = null;
				_CommentText_W = null;
				_CommentDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CommentInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CommentID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CommentUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CommentDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CommentID);
			p.SourceColumn = ColumnNames.CommentID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CommentID);
			p.SourceColumn = ColumnNames.CommentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IssueID);
			p.SourceColumn = ColumnNames.IssueID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommentText);
			p.SourceColumn = ColumnNames.CommentText;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommentDate);
			p.SourceColumn = ColumnNames.CommentDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
