
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PrintGeneral : SqlClientEntity
	{
		public _PrintGeneral()
		{
			this.QuerySource = "PrintGeneral";
			this.MappingName = "PrintGeneral";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PrintGeneralLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PrintGeneralID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PrintGeneralID, PrintGeneralID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PrintGeneralLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PrintGeneralID
			{
				get
				{
					return new SqlParameter("@PrintGeneralID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobOrderID
			{
				get
				{
					return new SqlParameter("@JobOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintingHouseID
			{
				get
				{
					return new SqlParameter("@PrintingHouseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintingDescription
			{
				get
				{
					return new SqlParameter("@PrintingDescription", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PrintingSizeID
			{
				get
				{
					return new SqlParameter("@PrintingSizeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RRV
			{
				get
				{
					return new SqlParameter("@RRV", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintingPaperSize
			{
				get
				{
					return new SqlParameter("@PrintingPaperSize", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter PaperType
			{
				get
				{
					return new SqlParameter("@PaperType", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PaperQuantity
			{
				get
				{
					return new SqlParameter("@PaperQuantity", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Notices
			{
				get
				{
					return new SqlParameter("@Notices", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter IsDeleted
			{
				get
				{
					return new SqlParameter("@IsDeleted", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PrintGeneralID = "PrintGeneralID";
            public const string JobOrderID = "JobOrderID";
            public const string PrintingHouseID = "PrintingHouseID";
            public const string PrintingDescription = "PrintingDescription";
            public const string PrintingSizeID = "PrintingSizeID";
            public const string RRV = "RRV";
            public const string PrintingPaperSize = "PrintingPaperSize";
            public const string PaperType = "PaperType";
            public const string PaperQuantity = "PaperQuantity";
            public const string Notices = "Notices";
            public const string IsDeleted = "isDeleted";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PrintGeneralID] = _PrintGeneral.PropertyNames.PrintGeneralID;
					ht[JobOrderID] = _PrintGeneral.PropertyNames.JobOrderID;
					ht[PrintingHouseID] = _PrintGeneral.PropertyNames.PrintingHouseID;
					ht[PrintingDescription] = _PrintGeneral.PropertyNames.PrintingDescription;
					ht[PrintingSizeID] = _PrintGeneral.PropertyNames.PrintingSizeID;
					ht[RRV] = _PrintGeneral.PropertyNames.RRV;
					ht[PrintingPaperSize] = _PrintGeneral.PropertyNames.PrintingPaperSize;
					ht[PaperType] = _PrintGeneral.PropertyNames.PaperType;
					ht[PaperQuantity] = _PrintGeneral.PropertyNames.PaperQuantity;
					ht[Notices] = _PrintGeneral.PropertyNames.Notices;
					ht[IsDeleted] = _PrintGeneral.PropertyNames.IsDeleted;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PrintGeneralID = "PrintGeneralID";
            public const string JobOrderID = "JobOrderID";
            public const string PrintingHouseID = "PrintingHouseID";
            public const string PrintingDescription = "PrintingDescription";
            public const string PrintingSizeID = "PrintingSizeID";
            public const string RRV = "RRV";
            public const string PrintingPaperSize = "PrintingPaperSize";
            public const string PaperType = "PaperType";
            public const string PaperQuantity = "PaperQuantity";
            public const string Notices = "Notices";
            public const string IsDeleted = "IsDeleted";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PrintGeneralID] = _PrintGeneral.ColumnNames.PrintGeneralID;
					ht[JobOrderID] = _PrintGeneral.ColumnNames.JobOrderID;
					ht[PrintingHouseID] = _PrintGeneral.ColumnNames.PrintingHouseID;
					ht[PrintingDescription] = _PrintGeneral.ColumnNames.PrintingDescription;
					ht[PrintingSizeID] = _PrintGeneral.ColumnNames.PrintingSizeID;
					ht[RRV] = _PrintGeneral.ColumnNames.RRV;
					ht[PrintingPaperSize] = _PrintGeneral.ColumnNames.PrintingPaperSize;
					ht[PaperType] = _PrintGeneral.ColumnNames.PaperType;
					ht[PaperQuantity] = _PrintGeneral.ColumnNames.PaperQuantity;
					ht[Notices] = _PrintGeneral.ColumnNames.Notices;
					ht[IsDeleted] = _PrintGeneral.ColumnNames.IsDeleted;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PrintGeneralID = "s_PrintGeneralID";
            public const string JobOrderID = "s_JobOrderID";
            public const string PrintingHouseID = "s_PrintingHouseID";
            public const string PrintingDescription = "s_PrintingDescription";
            public const string PrintingSizeID = "s_PrintingSizeID";
            public const string RRV = "s_RRV";
            public const string PrintingPaperSize = "s_PrintingPaperSize";
            public const string PaperType = "s_PaperType";
            public const string PaperQuantity = "s_PaperQuantity";
            public const string Notices = "s_Notices";
            public const string IsDeleted = "s_IsDeleted";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PrintGeneralID
	    {
			get
	        {
				return base.Getint(ColumnNames.PrintGeneralID);
			}
			set
	        {
				base.Setint(ColumnNames.PrintGeneralID, value);
			}
		}

		public virtual int JobOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.JobOrderID, value);
			}
		}

		public virtual int PrintingHouseID
	    {
			get
	        {
				return base.Getint(ColumnNames.PrintingHouseID);
			}
			set
	        {
				base.Setint(ColumnNames.PrintingHouseID, value);
			}
		}

		public virtual string PrintingDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.PrintingDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.PrintingDescription, value);
			}
		}

		public virtual int PrintingSizeID
	    {
			get
	        {
				return base.Getint(ColumnNames.PrintingSizeID);
			}
			set
	        {
				base.Setint(ColumnNames.PrintingSizeID, value);
			}
		}

		public virtual int RRV
	    {
			get
	        {
				return base.Getint(ColumnNames.RRV);
			}
			set
	        {
				base.Setint(ColumnNames.RRV, value);
			}
		}

		public virtual string PrintingPaperSize
	    {
			get
	        {
				return base.Getstring(ColumnNames.PrintingPaperSize);
			}
			set
	        {
				base.Setstring(ColumnNames.PrintingPaperSize, value);
			}
		}

		public virtual int PaperType
	    {
			get
	        {
				return base.Getint(ColumnNames.PaperType);
			}
			set
	        {
				base.Setint(ColumnNames.PaperType, value);
			}
		}

		public virtual int PaperQuantity
	    {
			get
	        {
				return base.Getint(ColumnNames.PaperQuantity);
			}
			set
	        {
				base.Setint(ColumnNames.PaperQuantity, value);
			}
		}

		public virtual string Notices
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notices);
			}
			set
	        {
				base.Setstring(ColumnNames.Notices, value);
			}
		}

		public virtual bool IsDeleted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeleted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeleted, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PrintGeneralID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintGeneralID) ? string.Empty : base.GetintAsString(ColumnNames.PrintGeneralID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintGeneralID);
				else
					this.PrintGeneralID = base.SetintAsString(ColumnNames.PrintGeneralID, value);
			}
		}

		public virtual string s_JobOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobOrderID) ? string.Empty : base.GetintAsString(ColumnNames.JobOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobOrderID);
				else
					this.JobOrderID = base.SetintAsString(ColumnNames.JobOrderID, value);
			}
		}

		public virtual string s_PrintingHouseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintingHouseID) ? string.Empty : base.GetintAsString(ColumnNames.PrintingHouseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintingHouseID);
				else
					this.PrintingHouseID = base.SetintAsString(ColumnNames.PrintingHouseID, value);
			}
		}

		public virtual string s_PrintingDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintingDescription) ? string.Empty : base.GetstringAsString(ColumnNames.PrintingDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintingDescription);
				else
					this.PrintingDescription = base.SetstringAsString(ColumnNames.PrintingDescription, value);
			}
		}

		public virtual string s_PrintingSizeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintingSizeID) ? string.Empty : base.GetintAsString(ColumnNames.PrintingSizeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintingSizeID);
				else
					this.PrintingSizeID = base.SetintAsString(ColumnNames.PrintingSizeID, value);
			}
		}

		public virtual string s_RRV
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RRV) ? string.Empty : base.GetintAsString(ColumnNames.RRV);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RRV);
				else
					this.RRV = base.SetintAsString(ColumnNames.RRV, value);
			}
		}

		public virtual string s_PrintingPaperSize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintingPaperSize) ? string.Empty : base.GetstringAsString(ColumnNames.PrintingPaperSize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintingPaperSize);
				else
					this.PrintingPaperSize = base.SetstringAsString(ColumnNames.PrintingPaperSize, value);
			}
		}

		public virtual string s_PaperType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaperType) ? string.Empty : base.GetintAsString(ColumnNames.PaperType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaperType);
				else
					this.PaperType = base.SetintAsString(ColumnNames.PaperType, value);
			}
		}

		public virtual string s_PaperQuantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaperQuantity) ? string.Empty : base.GetintAsString(ColumnNames.PaperQuantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaperQuantity);
				else
					this.PaperQuantity = base.SetintAsString(ColumnNames.PaperQuantity, value);
			}
		}

		public virtual string s_Notices
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notices) ? string.Empty : base.GetstringAsString(ColumnNames.Notices);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notices);
				else
					this.Notices = base.SetstringAsString(ColumnNames.Notices, value);
			}
		}

		public virtual string s_IsDeleted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeleted) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeleted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeleted);
				else
					this.IsDeleted = base.SetboolAsString(ColumnNames.IsDeleted, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PrintGeneralID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintGeneralID, Parameters.PrintGeneralID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintingHouseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintingHouseID, Parameters.PrintingHouseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintingDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintingDescription, Parameters.PrintingDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintingSizeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintingSizeID, Parameters.PrintingSizeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RRV
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RRV, Parameters.RRV);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintingPaperSize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintingPaperSize, Parameters.PrintingPaperSize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaperType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaperType, Parameters.PaperType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaperQuantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaperQuantity, Parameters.PaperQuantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notices
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notices, Parameters.Notices);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeleted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PrintGeneralID
		    {
				get
		        {
					if(_PrintGeneralID_W == null)
	        	    {
						_PrintGeneralID_W = TearOff.PrintGeneralID;
					}
					return _PrintGeneralID_W;
				}
			}

			public WhereParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public WhereParameter PrintingHouseID
		    {
				get
		        {
					if(_PrintingHouseID_W == null)
	        	    {
						_PrintingHouseID_W = TearOff.PrintingHouseID;
					}
					return _PrintingHouseID_W;
				}
			}

			public WhereParameter PrintingDescription
		    {
				get
		        {
					if(_PrintingDescription_W == null)
	        	    {
						_PrintingDescription_W = TearOff.PrintingDescription;
					}
					return _PrintingDescription_W;
				}
			}

			public WhereParameter PrintingSizeID
		    {
				get
		        {
					if(_PrintingSizeID_W == null)
	        	    {
						_PrintingSizeID_W = TearOff.PrintingSizeID;
					}
					return _PrintingSizeID_W;
				}
			}

			public WhereParameter RRV
		    {
				get
		        {
					if(_RRV_W == null)
	        	    {
						_RRV_W = TearOff.RRV;
					}
					return _RRV_W;
				}
			}

			public WhereParameter PrintingPaperSize
		    {
				get
		        {
					if(_PrintingPaperSize_W == null)
	        	    {
						_PrintingPaperSize_W = TearOff.PrintingPaperSize;
					}
					return _PrintingPaperSize_W;
				}
			}

			public WhereParameter PaperType
		    {
				get
		        {
					if(_PaperType_W == null)
	        	    {
						_PaperType_W = TearOff.PaperType;
					}
					return _PaperType_W;
				}
			}

			public WhereParameter PaperQuantity
		    {
				get
		        {
					if(_PaperQuantity_W == null)
	        	    {
						_PaperQuantity_W = TearOff.PaperQuantity;
					}
					return _PaperQuantity_W;
				}
			}

			public WhereParameter Notices
		    {
				get
		        {
					if(_Notices_W == null)
	        	    {
						_Notices_W = TearOff.Notices;
					}
					return _Notices_W;
				}
			}

			public WhereParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private WhereParameter _PrintGeneralID_W = null;
			private WhereParameter _JobOrderID_W = null;
			private WhereParameter _PrintingHouseID_W = null;
			private WhereParameter _PrintingDescription_W = null;
			private WhereParameter _PrintingSizeID_W = null;
			private WhereParameter _RRV_W = null;
			private WhereParameter _PrintingPaperSize_W = null;
			private WhereParameter _PaperType_W = null;
			private WhereParameter _PaperQuantity_W = null;
			private WhereParameter _Notices_W = null;
			private WhereParameter _IsDeleted_W = null;

			public void WhereClauseReset()
			{
				_PrintGeneralID_W = null;
				_JobOrderID_W = null;
				_PrintingHouseID_W = null;
				_PrintingDescription_W = null;
				_PrintingSizeID_W = null;
				_RRV_W = null;
				_PrintingPaperSize_W = null;
				_PaperType_W = null;
				_PaperQuantity_W = null;
				_Notices_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PrintGeneralID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintGeneralID, Parameters.PrintGeneralID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintingHouseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintingHouseID, Parameters.PrintingHouseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintingDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintingDescription, Parameters.PrintingDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintingSizeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintingSizeID, Parameters.PrintingSizeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RRV
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RRV, Parameters.RRV);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintingPaperSize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintingPaperSize, Parameters.PrintingPaperSize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaperType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaperType, Parameters.PaperType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaperQuantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaperQuantity, Parameters.PaperQuantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notices
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notices, Parameters.Notices);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeleted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PrintGeneralID
		    {
				get
		        {
					if(_PrintGeneralID_W == null)
	        	    {
						_PrintGeneralID_W = TearOff.PrintGeneralID;
					}
					return _PrintGeneralID_W;
				}
			}

			public AggregateParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public AggregateParameter PrintingHouseID
		    {
				get
		        {
					if(_PrintingHouseID_W == null)
	        	    {
						_PrintingHouseID_W = TearOff.PrintingHouseID;
					}
					return _PrintingHouseID_W;
				}
			}

			public AggregateParameter PrintingDescription
		    {
				get
		        {
					if(_PrintingDescription_W == null)
	        	    {
						_PrintingDescription_W = TearOff.PrintingDescription;
					}
					return _PrintingDescription_W;
				}
			}

			public AggregateParameter PrintingSizeID
		    {
				get
		        {
					if(_PrintingSizeID_W == null)
	        	    {
						_PrintingSizeID_W = TearOff.PrintingSizeID;
					}
					return _PrintingSizeID_W;
				}
			}

			public AggregateParameter RRV
		    {
				get
		        {
					if(_RRV_W == null)
	        	    {
						_RRV_W = TearOff.RRV;
					}
					return _RRV_W;
				}
			}

			public AggregateParameter PrintingPaperSize
		    {
				get
		        {
					if(_PrintingPaperSize_W == null)
	        	    {
						_PrintingPaperSize_W = TearOff.PrintingPaperSize;
					}
					return _PrintingPaperSize_W;
				}
			}

			public AggregateParameter PaperType
		    {
				get
		        {
					if(_PaperType_W == null)
	        	    {
						_PaperType_W = TearOff.PaperType;
					}
					return _PaperType_W;
				}
			}

			public AggregateParameter PaperQuantity
		    {
				get
		        {
					if(_PaperQuantity_W == null)
	        	    {
						_PaperQuantity_W = TearOff.PaperQuantity;
					}
					return _PaperQuantity_W;
				}
			}

			public AggregateParameter Notices
		    {
				get
		        {
					if(_Notices_W == null)
	        	    {
						_Notices_W = TearOff.Notices;
					}
					return _Notices_W;
				}
			}

			public AggregateParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private AggregateParameter _PrintGeneralID_W = null;
			private AggregateParameter _JobOrderID_W = null;
			private AggregateParameter _PrintingHouseID_W = null;
			private AggregateParameter _PrintingDescription_W = null;
			private AggregateParameter _PrintingSizeID_W = null;
			private AggregateParameter _RRV_W = null;
			private AggregateParameter _PrintingPaperSize_W = null;
			private AggregateParameter _PaperType_W = null;
			private AggregateParameter _PaperQuantity_W = null;
			private AggregateParameter _Notices_W = null;
			private AggregateParameter _IsDeleted_W = null;

			public void AggregateClauseReset()
			{
				_PrintGeneralID_W = null;
				_JobOrderID_W = null;
				_PrintingHouseID_W = null;
				_PrintingDescription_W = null;
				_PrintingSizeID_W = null;
				_RRV_W = null;
				_PrintingPaperSize_W = null;
				_PaperType_W = null;
				_PaperQuantity_W = null;
				_Notices_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PrintGeneralInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PrintGeneralUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PrintGeneralDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PrintGeneralID);
			p.SourceColumn = ColumnNames.PrintGeneralID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PrintGeneralID);
			p.SourceColumn = ColumnNames.PrintGeneralID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobOrderID);
			p.SourceColumn = ColumnNames.JobOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintingHouseID);
			p.SourceColumn = ColumnNames.PrintingHouseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintingDescription);
			p.SourceColumn = ColumnNames.PrintingDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintingSizeID);
			p.SourceColumn = ColumnNames.PrintingSizeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RRV);
			p.SourceColumn = ColumnNames.RRV;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintingPaperSize);
			p.SourceColumn = ColumnNames.PrintingPaperSize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaperType);
			p.SourceColumn = ColumnNames.PaperType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaperQuantity);
			p.SourceColumn = ColumnNames.PaperQuantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notices);
			p.SourceColumn = ColumnNames.Notices;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeleted);
			p.SourceColumn = ColumnNames.IsDeleted;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
