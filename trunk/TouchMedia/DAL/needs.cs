
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _needs : SqlClientEntity
	{
		public _needs()
		{
			this.QuerySource = "needs";
			this.MappingName = "needs";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_needsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int NeedID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.NeedID, NeedID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_needsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter NeedID
			{
				get
				{
					return new SqlParameter("@NeedID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobOrderID
			{
				get
				{
					return new SqlParameter("@JobOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NeedName
			{
				get
				{
					return new SqlParameter("@NeedName", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter NeedSupplier
			{
				get
				{
					return new SqlParameter("@NeedSupplier", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter NeedQuantity
			{
				get
				{
					return new SqlParameter("@NeedQuantity", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter IsNew
			{
				get
				{
					return new SqlParameter("@IsNew", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsAvalible
			{
				get
				{
					return new SqlParameter("@IsAvalible", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsMaintenance
			{
				get
				{
					return new SqlParameter("@IsMaintenance", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string NeedID = "NeedID";
            public const string JobOrderID = "JobOrderID";
            public const string NeedName = "NeedName";
            public const string NeedSupplier = "NeedSupplier";
            public const string NeedQuantity = "NeedQuantity";
            public const string IsNew = "IsNew";
            public const string IsAvalible = "IsAvalible";
            public const string IsMaintenance = "IsMaintenance";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[NeedID] = _needs.PropertyNames.NeedID;
					ht[JobOrderID] = _needs.PropertyNames.JobOrderID;
					ht[NeedName] = _needs.PropertyNames.NeedName;
					ht[NeedSupplier] = _needs.PropertyNames.NeedSupplier;
					ht[NeedQuantity] = _needs.PropertyNames.NeedQuantity;
					ht[IsNew] = _needs.PropertyNames.IsNew;
					ht[IsAvalible] = _needs.PropertyNames.IsAvalible;
					ht[IsMaintenance] = _needs.PropertyNames.IsMaintenance;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string NeedID = "NeedID";
            public const string JobOrderID = "JobOrderID";
            public const string NeedName = "NeedName";
            public const string NeedSupplier = "NeedSupplier";
            public const string NeedQuantity = "NeedQuantity";
            public const string IsNew = "IsNew";
            public const string IsAvalible = "IsAvalible";
            public const string IsMaintenance = "IsMaintenance";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[NeedID] = _needs.ColumnNames.NeedID;
					ht[JobOrderID] = _needs.ColumnNames.JobOrderID;
					ht[NeedName] = _needs.ColumnNames.NeedName;
					ht[NeedSupplier] = _needs.ColumnNames.NeedSupplier;
					ht[NeedQuantity] = _needs.ColumnNames.NeedQuantity;
					ht[IsNew] = _needs.ColumnNames.IsNew;
					ht[IsAvalible] = _needs.ColumnNames.IsAvalible;
					ht[IsMaintenance] = _needs.ColumnNames.IsMaintenance;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string NeedID = "s_NeedID";
            public const string JobOrderID = "s_JobOrderID";
            public const string NeedName = "s_NeedName";
            public const string NeedSupplier = "s_NeedSupplier";
            public const string NeedQuantity = "s_NeedQuantity";
            public const string IsNew = "s_IsNew";
            public const string IsAvalible = "s_IsAvalible";
            public const string IsMaintenance = "s_IsMaintenance";

		}
		#endregion		
		
		#region Properties
	
		public virtual int NeedID
	    {
			get
	        {
				return base.Getint(ColumnNames.NeedID);
			}
			set
	        {
				base.Setint(ColumnNames.NeedID, value);
			}
		}

		public virtual int JobOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.JobOrderID, value);
			}
		}

		public virtual string NeedName
	    {
			get
	        {
				return base.Getstring(ColumnNames.NeedName);
			}
			set
	        {
				base.Setstring(ColumnNames.NeedName, value);
			}
		}

		public virtual string NeedSupplier
	    {
			get
	        {
				return base.Getstring(ColumnNames.NeedSupplier);
			}
			set
	        {
				base.Setstring(ColumnNames.NeedSupplier, value);
			}
		}

		public virtual string NeedQuantity
	    {
			get
	        {
				return base.Getstring(ColumnNames.NeedQuantity);
			}
			set
	        {
				base.Setstring(ColumnNames.NeedQuantity, value);
			}
		}

		public virtual bool IsNew
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsNew);
			}
			set
	        {
				base.Setbool(ColumnNames.IsNew, value);
			}
		}

		public virtual bool IsAvalible
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsAvalible);
			}
			set
	        {
				base.Setbool(ColumnNames.IsAvalible, value);
			}
		}

		public virtual bool IsMaintenance
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsMaintenance);
			}
			set
	        {
				base.Setbool(ColumnNames.IsMaintenance, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_NeedID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NeedID) ? string.Empty : base.GetintAsString(ColumnNames.NeedID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NeedID);
				else
					this.NeedID = base.SetintAsString(ColumnNames.NeedID, value);
			}
		}

		public virtual string s_JobOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobOrderID) ? string.Empty : base.GetintAsString(ColumnNames.JobOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobOrderID);
				else
					this.JobOrderID = base.SetintAsString(ColumnNames.JobOrderID, value);
			}
		}

		public virtual string s_NeedName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NeedName) ? string.Empty : base.GetstringAsString(ColumnNames.NeedName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NeedName);
				else
					this.NeedName = base.SetstringAsString(ColumnNames.NeedName, value);
			}
		}

		public virtual string s_NeedSupplier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NeedSupplier) ? string.Empty : base.GetstringAsString(ColumnNames.NeedSupplier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NeedSupplier);
				else
					this.NeedSupplier = base.SetstringAsString(ColumnNames.NeedSupplier, value);
			}
		}

		public virtual string s_NeedQuantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NeedQuantity) ? string.Empty : base.GetstringAsString(ColumnNames.NeedQuantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NeedQuantity);
				else
					this.NeedQuantity = base.SetstringAsString(ColumnNames.NeedQuantity, value);
			}
		}

		public virtual string s_IsNew
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsNew) ? string.Empty : base.GetboolAsString(ColumnNames.IsNew);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsNew);
				else
					this.IsNew = base.SetboolAsString(ColumnNames.IsNew, value);
			}
		}

		public virtual string s_IsAvalible
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsAvalible) ? string.Empty : base.GetboolAsString(ColumnNames.IsAvalible);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsAvalible);
				else
					this.IsAvalible = base.SetboolAsString(ColumnNames.IsAvalible, value);
			}
		}

		public virtual string s_IsMaintenance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsMaintenance) ? string.Empty : base.GetboolAsString(ColumnNames.IsMaintenance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsMaintenance);
				else
					this.IsMaintenance = base.SetboolAsString(ColumnNames.IsMaintenance, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter NeedID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NeedID, Parameters.NeedID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NeedName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NeedName, Parameters.NeedName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NeedSupplier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NeedSupplier, Parameters.NeedSupplier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NeedQuantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NeedQuantity, Parameters.NeedQuantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsNew
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsNew, Parameters.IsNew);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsAvalible
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsAvalible, Parameters.IsAvalible);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsMaintenance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsMaintenance, Parameters.IsMaintenance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter NeedID
		    {
				get
		        {
					if(_NeedID_W == null)
	        	    {
						_NeedID_W = TearOff.NeedID;
					}
					return _NeedID_W;
				}
			}

			public WhereParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public WhereParameter NeedName
		    {
				get
		        {
					if(_NeedName_W == null)
	        	    {
						_NeedName_W = TearOff.NeedName;
					}
					return _NeedName_W;
				}
			}

			public WhereParameter NeedSupplier
		    {
				get
		        {
					if(_NeedSupplier_W == null)
	        	    {
						_NeedSupplier_W = TearOff.NeedSupplier;
					}
					return _NeedSupplier_W;
				}
			}

			public WhereParameter NeedQuantity
		    {
				get
		        {
					if(_NeedQuantity_W == null)
	        	    {
						_NeedQuantity_W = TearOff.NeedQuantity;
					}
					return _NeedQuantity_W;
				}
			}

			public WhereParameter IsNew
		    {
				get
		        {
					if(_IsNew_W == null)
	        	    {
						_IsNew_W = TearOff.IsNew;
					}
					return _IsNew_W;
				}
			}

			public WhereParameter IsAvalible
		    {
				get
		        {
					if(_IsAvalible_W == null)
	        	    {
						_IsAvalible_W = TearOff.IsAvalible;
					}
					return _IsAvalible_W;
				}
			}

			public WhereParameter IsMaintenance
		    {
				get
		        {
					if(_IsMaintenance_W == null)
	        	    {
						_IsMaintenance_W = TearOff.IsMaintenance;
					}
					return _IsMaintenance_W;
				}
			}

			private WhereParameter _NeedID_W = null;
			private WhereParameter _JobOrderID_W = null;
			private WhereParameter _NeedName_W = null;
			private WhereParameter _NeedSupplier_W = null;
			private WhereParameter _NeedQuantity_W = null;
			private WhereParameter _IsNew_W = null;
			private WhereParameter _IsAvalible_W = null;
			private WhereParameter _IsMaintenance_W = null;

			public void WhereClauseReset()
			{
				_NeedID_W = null;
				_JobOrderID_W = null;
				_NeedName_W = null;
				_NeedSupplier_W = null;
				_NeedQuantity_W = null;
				_IsNew_W = null;
				_IsAvalible_W = null;
				_IsMaintenance_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter NeedID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedID, Parameters.NeedID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NeedName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedName, Parameters.NeedName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NeedSupplier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedSupplier, Parameters.NeedSupplier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NeedQuantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedQuantity, Parameters.NeedQuantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsNew
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsNew, Parameters.IsNew);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsAvalible
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsAvalible, Parameters.IsAvalible);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsMaintenance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsMaintenance, Parameters.IsMaintenance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter NeedID
		    {
				get
		        {
					if(_NeedID_W == null)
	        	    {
						_NeedID_W = TearOff.NeedID;
					}
					return _NeedID_W;
				}
			}

			public AggregateParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public AggregateParameter NeedName
		    {
				get
		        {
					if(_NeedName_W == null)
	        	    {
						_NeedName_W = TearOff.NeedName;
					}
					return _NeedName_W;
				}
			}

			public AggregateParameter NeedSupplier
		    {
				get
		        {
					if(_NeedSupplier_W == null)
	        	    {
						_NeedSupplier_W = TearOff.NeedSupplier;
					}
					return _NeedSupplier_W;
				}
			}

			public AggregateParameter NeedQuantity
		    {
				get
		        {
					if(_NeedQuantity_W == null)
	        	    {
						_NeedQuantity_W = TearOff.NeedQuantity;
					}
					return _NeedQuantity_W;
				}
			}

			public AggregateParameter IsNew
		    {
				get
		        {
					if(_IsNew_W == null)
	        	    {
						_IsNew_W = TearOff.IsNew;
					}
					return _IsNew_W;
				}
			}

			public AggregateParameter IsAvalible
		    {
				get
		        {
					if(_IsAvalible_W == null)
	        	    {
						_IsAvalible_W = TearOff.IsAvalible;
					}
					return _IsAvalible_W;
				}
			}

			public AggregateParameter IsMaintenance
		    {
				get
		        {
					if(_IsMaintenance_W == null)
	        	    {
						_IsMaintenance_W = TearOff.IsMaintenance;
					}
					return _IsMaintenance_W;
				}
			}

			private AggregateParameter _NeedID_W = null;
			private AggregateParameter _JobOrderID_W = null;
			private AggregateParameter _NeedName_W = null;
			private AggregateParameter _NeedSupplier_W = null;
			private AggregateParameter _NeedQuantity_W = null;
			private AggregateParameter _IsNew_W = null;
			private AggregateParameter _IsAvalible_W = null;
			private AggregateParameter _IsMaintenance_W = null;

			public void AggregateClauseReset()
			{
				_NeedID_W = null;
				_JobOrderID_W = null;
				_NeedName_W = null;
				_NeedSupplier_W = null;
				_NeedQuantity_W = null;
				_IsNew_W = null;
				_IsAvalible_W = null;
				_IsMaintenance_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_needsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.NeedID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_needsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_needsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.NeedID);
			p.SourceColumn = ColumnNames.NeedID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.NeedID);
			p.SourceColumn = ColumnNames.NeedID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobOrderID);
			p.SourceColumn = ColumnNames.JobOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NeedName);
			p.SourceColumn = ColumnNames.NeedName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NeedSupplier);
			p.SourceColumn = ColumnNames.NeedSupplier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NeedQuantity);
			p.SourceColumn = ColumnNames.NeedQuantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsNew);
			p.SourceColumn = ColumnNames.IsNew;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsAvalible);
			p.SourceColumn = ColumnNames.IsAvalible;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsMaintenance);
			p.SourceColumn = ColumnNames.IsMaintenance;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
