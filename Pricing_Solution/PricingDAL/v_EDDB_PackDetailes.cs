/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace View
{
	public class _v_EDDB_PackDetailes : SqlClientEntity
	{
		public _v_EDDB_PackDetailes()
		{
			this.QuerySource = "v_EDDB_PackDetailes";
			this.MappingName = "v_EDDB_PackDetailes";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TradeCode
			{
				get
				{
					return new SqlParameter("@TradeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Trade_name
			{
				get
				{
					return new SqlParameter("@Trade_name", SqlDbType.VarChar, 300);
				}
			}
			
			public static SqlParameter Pack_unit
			{
				get
				{
					return new SqlParameter("@Pack_unit", SqlDbType.VarChar, 30);
				}
			}
			
			public static SqlParameter Conver_sub
			{
				get
				{
					return new SqlParameter("@Conver_sub", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Pack_Unit_Name
			{
				get
				{
					return new SqlParameter("@Pack_Unit_Name", SqlDbType.VarChar, 30);
				}
			}
			
			public static SqlParameter Unit_price
			{
				get
				{
					return new SqlParameter("@Unit_price", SqlDbType.Money, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TradeCode = "TradeCode";
            public const string Trade_name = "Trade_name";
            public const string Pack_unit = "Pack_unit";
            public const string Conver_sub = "conver_sub";
            public const string Pack_Unit_Name = "Pack_Unit_Name";
            public const string Unit_price = "unit_price";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradeCode] = _v_EDDB_PackDetailes.PropertyNames.TradeCode;
					ht[Trade_name] = _v_EDDB_PackDetailes.PropertyNames.Trade_name;
					ht[Pack_unit] = _v_EDDB_PackDetailes.PropertyNames.Pack_unit;
					ht[Conver_sub] = _v_EDDB_PackDetailes.PropertyNames.Conver_sub;
					ht[Pack_Unit_Name] = _v_EDDB_PackDetailes.PropertyNames.Pack_Unit_Name;
					ht[Unit_price] = _v_EDDB_PackDetailes.PropertyNames.Unit_price;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TradeCode = "TradeCode";
            public const string Trade_name = "Trade_name";
            public const string Pack_unit = "Pack_unit";
            public const string Conver_sub = "Conver_sub";
            public const string Pack_Unit_Name = "Pack_Unit_Name";
            public const string Unit_price = "Unit_price";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradeCode] = _v_EDDB_PackDetailes.ColumnNames.TradeCode;
					ht[Trade_name] = _v_EDDB_PackDetailes.ColumnNames.Trade_name;
					ht[Pack_unit] = _v_EDDB_PackDetailes.ColumnNames.Pack_unit;
					ht[Conver_sub] = _v_EDDB_PackDetailes.ColumnNames.Conver_sub;
					ht[Pack_Unit_Name] = _v_EDDB_PackDetailes.ColumnNames.Pack_Unit_Name;
					ht[Unit_price] = _v_EDDB_PackDetailes.ColumnNames.Unit_price;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TradeCode = "s_TradeCode";
            public const string Trade_name = "s_Trade_name";
            public const string Pack_unit = "s_Pack_unit";
            public const string Conver_sub = "s_Conver_sub";
            public const string Pack_Unit_Name = "s_Pack_Unit_Name";
            public const string Unit_price = "s_Unit_price";

		}
		#endregion	
		
		#region Properties
			public virtual int TradeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.TradeCode);
			}
			set
	        {
				base.Setint(ColumnNames.TradeCode, value);
			}
		}

		public virtual string Trade_name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Trade_name);
			}
			set
	        {
				base.Setstring(ColumnNames.Trade_name, value);
			}
		}

		public virtual string Pack_unit
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pack_unit);
			}
			set
	        {
				base.Setstring(ColumnNames.Pack_unit, value);
			}
		}

		public virtual decimal Conver_sub
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Conver_sub);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Conver_sub, value);
			}
		}

		public virtual string Pack_Unit_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pack_Unit_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Pack_Unit_Name, value);
			}
		}

		public virtual decimal Unit_price
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Unit_price);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Unit_price, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TradeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradeCode) ? string.Empty : base.GetintAsString(ColumnNames.TradeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradeCode);
				else
					this.TradeCode = base.SetintAsString(ColumnNames.TradeCode, value);
			}
		}

		public virtual string s_Trade_name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Trade_name) ? string.Empty : base.GetstringAsString(ColumnNames.Trade_name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Trade_name);
				else
					this.Trade_name = base.SetstringAsString(ColumnNames.Trade_name, value);
			}
		}

		public virtual string s_Pack_unit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pack_unit) ? string.Empty : base.GetstringAsString(ColumnNames.Pack_unit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pack_unit);
				else
					this.Pack_unit = base.SetstringAsString(ColumnNames.Pack_unit, value);
			}
		}

		public virtual string s_Conver_sub
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Conver_sub) ? string.Empty : base.GetdecimalAsString(ColumnNames.Conver_sub);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Conver_sub);
				else
					this.Conver_sub = base.SetdecimalAsString(ColumnNames.Conver_sub, value);
			}
		}

		public virtual string s_Pack_Unit_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pack_Unit_Name) ? string.Empty : base.GetstringAsString(ColumnNames.Pack_Unit_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pack_Unit_Name);
				else
					this.Pack_Unit_Name = base.SetstringAsString(ColumnNames.Pack_Unit_Name, value);
			}
		}

		public virtual string s_Unit_price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Unit_price) ? string.Empty : base.GetdecimalAsString(ColumnNames.Unit_price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Unit_price);
				else
					this.Unit_price = base.SetdecimalAsString(ColumnNames.Unit_price, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TradeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradeCode, Parameters.TradeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Trade_name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Trade_name, Parameters.Trade_name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pack_unit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pack_unit, Parameters.Pack_unit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Conver_sub
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Conver_sub, Parameters.Conver_sub);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pack_Unit_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pack_Unit_Name, Parameters.Pack_Unit_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Unit_price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Unit_price, Parameters.Unit_price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TradeCode
		    {
				get
		        {
					if(_TradeCode_W == null)
	        	    {
						_TradeCode_W = TearOff.TradeCode;
					}
					return _TradeCode_W;
				}
			}

			public WhereParameter Trade_name
		    {
				get
		        {
					if(_Trade_name_W == null)
	        	    {
						_Trade_name_W = TearOff.Trade_name;
					}
					return _Trade_name_W;
				}
			}

			public WhereParameter Pack_unit
		    {
				get
		        {
					if(_Pack_unit_W == null)
	        	    {
						_Pack_unit_W = TearOff.Pack_unit;
					}
					return _Pack_unit_W;
				}
			}

			public WhereParameter Conver_sub
		    {
				get
		        {
					if(_Conver_sub_W == null)
	        	    {
						_Conver_sub_W = TearOff.Conver_sub;
					}
					return _Conver_sub_W;
				}
			}

			public WhereParameter Pack_Unit_Name
		    {
				get
		        {
					if(_Pack_Unit_Name_W == null)
	        	    {
						_Pack_Unit_Name_W = TearOff.Pack_Unit_Name;
					}
					return _Pack_Unit_Name_W;
				}
			}

			public WhereParameter Unit_price
		    {
				get
		        {
					if(_Unit_price_W == null)
	        	    {
						_Unit_price_W = TearOff.Unit_price;
					}
					return _Unit_price_W;
				}
			}

			private WhereParameter _TradeCode_W = null;
			private WhereParameter _Trade_name_W = null;
			private WhereParameter _Pack_unit_W = null;
			private WhereParameter _Conver_sub_W = null;
			private WhereParameter _Pack_Unit_Name_W = null;
			private WhereParameter _Unit_price_W = null;

			public void WhereClauseReset()
			{
				_TradeCode_W = null;
				_Trade_name_W = null;
				_Pack_unit_W = null;
				_Conver_sub_W = null;
				_Pack_Unit_Name_W = null;
				_Unit_price_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TradeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradeCode, Parameters.TradeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Trade_name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Trade_name, Parameters.Trade_name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pack_unit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pack_unit, Parameters.Pack_unit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Conver_sub
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Conver_sub, Parameters.Conver_sub);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pack_Unit_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pack_Unit_Name, Parameters.Pack_Unit_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Unit_price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Unit_price, Parameters.Unit_price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TradeCode
		    {
				get
		        {
					if(_TradeCode_W == null)
	        	    {
						_TradeCode_W = TearOff.TradeCode;
					}
					return _TradeCode_W;
				}
			}

			public AggregateParameter Trade_name
		    {
				get
		        {
					if(_Trade_name_W == null)
	        	    {
						_Trade_name_W = TearOff.Trade_name;
					}
					return _Trade_name_W;
				}
			}

			public AggregateParameter Pack_unit
		    {
				get
		        {
					if(_Pack_unit_W == null)
	        	    {
						_Pack_unit_W = TearOff.Pack_unit;
					}
					return _Pack_unit_W;
				}
			}

			public AggregateParameter Conver_sub
		    {
				get
		        {
					if(_Conver_sub_W == null)
	        	    {
						_Conver_sub_W = TearOff.Conver_sub;
					}
					return _Conver_sub_W;
				}
			}

			public AggregateParameter Pack_Unit_Name
		    {
				get
		        {
					if(_Pack_Unit_Name_W == null)
	        	    {
						_Pack_Unit_Name_W = TearOff.Pack_Unit_Name;
					}
					return _Pack_Unit_Name_W;
				}
			}

			public AggregateParameter Unit_price
		    {
				get
		        {
					if(_Unit_price_W == null)
	        	    {
						_Unit_price_W = TearOff.Unit_price;
					}
					return _Unit_price_W;
				}
			}

			private AggregateParameter _TradeCode_W = null;
			private AggregateParameter _Trade_name_W = null;
			private AggregateParameter _Pack_unit_W = null;
			private AggregateParameter _Conver_sub_W = null;
			private AggregateParameter _Pack_Unit_Name_W = null;
			private AggregateParameter _Unit_price_W = null;

			public void AggregateClauseReset()
			{
				_TradeCode_W = null;
				_Trade_name_W = null;
				_Pack_unit_W = null;
				_Conver_sub_W = null;
				_Pack_Unit_Name_W = null;
				_Unit_price_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
