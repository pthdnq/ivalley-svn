/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace View
{
	public class _V_EDDB_DrugGenerics : SqlClientEntity
	{
		public _V_EDDB_DrugGenerics()
		{
			this.QuerySource = "V_EDDB_DrugGenerics";
			this.MappingName = "V_EDDB_DrugGenerics";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter GenericName_ID
			{
				get
				{
					return new SqlParameter("@GenericName_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter GenericName
			{
				get
				{
					return new SqlParameter("@GenericName", SqlDbType.VarChar, 350);
				}
			}
			
			public static SqlParameter Indications
			{
				get
				{
					return new SqlParameter("@Indications", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter Cautions
			{
				get
				{
					return new SqlParameter("@Cautions", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter Contra_indications
			{
				get
				{
					return new SqlParameter("@Contra_indications", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter Side_effects
			{
				get
				{
					return new SqlParameter("@Side_effects", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter Dose
			{
				get
				{
					return new SqlParameter("@Dose", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter InterActionLevelCode
			{
				get
				{
					return new SqlParameter("@InterActionLevelCode", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter Interaction
			{
				get
				{
					return new SqlParameter("@Interaction", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter General
			{
				get
				{
					return new SqlParameter("@General", SqlDbType.VarChar, 5000);
				}
			}
			
			public static SqlParameter HDL
			{
				get
				{
					return new SqlParameter("@HDL", SqlDbType.VarChar, 500);
				}
			}
			
			public static SqlParameter STORE
			{
				get
				{
					return new SqlParameter("@STORE", SqlDbType.VarChar, 500);
				}
			}
			
			public static SqlParameter CPNUM
			{
				get
				{
					return new SqlParameter("@CPNUM", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Dilution
			{
				get
				{
					return new SqlParameter("@Dilution", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MaxChemoDose
			{
				get
				{
					return new SqlParameter("@MaxChemoDose", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TPNIngredient
			{
				get
				{
					return new SqlParameter("@TPNIngredient", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ChemoCalcType
			{
				get
				{
					return new SqlParameter("@ChemoCalcType", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsVaccine
			{
				get
				{
					return new SqlParameter("@IsVaccine", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TradeName_ID
			{
				get
				{
					return new SqlParameter("@TradeName_ID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string GenericName_ID = "GenericName_ID";
            public const string GenericName = "GenericName";
            public const string Indications = "Indications";
            public const string Cautions = "Cautions";
            public const string Contra_indications = "Contra_indications";
            public const string Side_effects = "Side_effects";
            public const string Dose = "Dose";
            public const string InterActionLevelCode = "InterActionLevelCode";
            public const string Interaction = "Interaction";
            public const string General = "General";
            public const string HDL = "HDL";
            public const string STORE = "STORE";
            public const string CPNUM = "CPNUM";
            public const string Dilution = "Dilution";
            public const string MaxChemoDose = "MaxChemoDose";
            public const string TPNIngredient = "TPNIngredient";
            public const string ChemoCalcType = "ChemoCalcType";
            public const string IsVaccine = "IsVaccine";
            public const string TradeName_ID = "TradeName_ID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[GenericName_ID] = _V_EDDB_DrugGenerics.PropertyNames.GenericName_ID;
					ht[GenericName] = _V_EDDB_DrugGenerics.PropertyNames.GenericName;
					ht[Indications] = _V_EDDB_DrugGenerics.PropertyNames.Indications;
					ht[Cautions] = _V_EDDB_DrugGenerics.PropertyNames.Cautions;
					ht[Contra_indications] = _V_EDDB_DrugGenerics.PropertyNames.Contra_indications;
					ht[Side_effects] = _V_EDDB_DrugGenerics.PropertyNames.Side_effects;
					ht[Dose] = _V_EDDB_DrugGenerics.PropertyNames.Dose;
					ht[InterActionLevelCode] = _V_EDDB_DrugGenerics.PropertyNames.InterActionLevelCode;
					ht[Interaction] = _V_EDDB_DrugGenerics.PropertyNames.Interaction;
					ht[General] = _V_EDDB_DrugGenerics.PropertyNames.General;
					ht[HDL] = _V_EDDB_DrugGenerics.PropertyNames.HDL;
					ht[STORE] = _V_EDDB_DrugGenerics.PropertyNames.STORE;
					ht[CPNUM] = _V_EDDB_DrugGenerics.PropertyNames.CPNUM;
					ht[Dilution] = _V_EDDB_DrugGenerics.PropertyNames.Dilution;
					ht[MaxChemoDose] = _V_EDDB_DrugGenerics.PropertyNames.MaxChemoDose;
					ht[TPNIngredient] = _V_EDDB_DrugGenerics.PropertyNames.TPNIngredient;
					ht[ChemoCalcType] = _V_EDDB_DrugGenerics.PropertyNames.ChemoCalcType;
					ht[IsVaccine] = _V_EDDB_DrugGenerics.PropertyNames.IsVaccine;
					ht[TradeName_ID] = _V_EDDB_DrugGenerics.PropertyNames.TradeName_ID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string GenericName_ID = "GenericName_ID";
            public const string GenericName = "GenericName";
            public const string Indications = "Indications";
            public const string Cautions = "Cautions";
            public const string Contra_indications = "Contra_indications";
            public const string Side_effects = "Side_effects";
            public const string Dose = "Dose";
            public const string InterActionLevelCode = "InterActionLevelCode";
            public const string Interaction = "Interaction";
            public const string General = "General";
            public const string HDL = "HDL";
            public const string STORE = "STORE";
            public const string CPNUM = "CPNUM";
            public const string Dilution = "Dilution";
            public const string MaxChemoDose = "MaxChemoDose";
            public const string TPNIngredient = "TPNIngredient";
            public const string ChemoCalcType = "ChemoCalcType";
            public const string IsVaccine = "IsVaccine";
            public const string TradeName_ID = "TradeName_ID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[GenericName_ID] = _V_EDDB_DrugGenerics.ColumnNames.GenericName_ID;
					ht[GenericName] = _V_EDDB_DrugGenerics.ColumnNames.GenericName;
					ht[Indications] = _V_EDDB_DrugGenerics.ColumnNames.Indications;
					ht[Cautions] = _V_EDDB_DrugGenerics.ColumnNames.Cautions;
					ht[Contra_indications] = _V_EDDB_DrugGenerics.ColumnNames.Contra_indications;
					ht[Side_effects] = _V_EDDB_DrugGenerics.ColumnNames.Side_effects;
					ht[Dose] = _V_EDDB_DrugGenerics.ColumnNames.Dose;
					ht[InterActionLevelCode] = _V_EDDB_DrugGenerics.ColumnNames.InterActionLevelCode;
					ht[Interaction] = _V_EDDB_DrugGenerics.ColumnNames.Interaction;
					ht[General] = _V_EDDB_DrugGenerics.ColumnNames.General;
					ht[HDL] = _V_EDDB_DrugGenerics.ColumnNames.HDL;
					ht[STORE] = _V_EDDB_DrugGenerics.ColumnNames.STORE;
					ht[CPNUM] = _V_EDDB_DrugGenerics.ColumnNames.CPNUM;
					ht[Dilution] = _V_EDDB_DrugGenerics.ColumnNames.Dilution;
					ht[MaxChemoDose] = _V_EDDB_DrugGenerics.ColumnNames.MaxChemoDose;
					ht[TPNIngredient] = _V_EDDB_DrugGenerics.ColumnNames.TPNIngredient;
					ht[ChemoCalcType] = _V_EDDB_DrugGenerics.ColumnNames.ChemoCalcType;
					ht[IsVaccine] = _V_EDDB_DrugGenerics.ColumnNames.IsVaccine;
					ht[TradeName_ID] = _V_EDDB_DrugGenerics.ColumnNames.TradeName_ID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string GenericName_ID = "s_GenericName_ID";
            public const string GenericName = "s_GenericName";
            public const string Indications = "s_Indications";
            public const string Cautions = "s_Cautions";
            public const string Contra_indications = "s_Contra_indications";
            public const string Side_effects = "s_Side_effects";
            public const string Dose = "s_Dose";
            public const string InterActionLevelCode = "s_InterActionLevelCode";
            public const string Interaction = "s_Interaction";
            public const string General = "s_General";
            public const string HDL = "s_HDL";
            public const string STORE = "s_STORE";
            public const string CPNUM = "s_CPNUM";
            public const string Dilution = "s_Dilution";
            public const string MaxChemoDose = "s_MaxChemoDose";
            public const string TPNIngredient = "s_TPNIngredient";
            public const string ChemoCalcType = "s_ChemoCalcType";
            public const string IsVaccine = "s_IsVaccine";
            public const string TradeName_ID = "s_TradeName_ID";

		}
		#endregion	
		
		#region Properties
			public virtual int GenericName_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.GenericName_ID);
			}
			set
	        {
				base.Setint(ColumnNames.GenericName_ID, value);
			}
		}

		public virtual string GenericName
	    {
			get
	        {
				return base.Getstring(ColumnNames.GenericName);
			}
			set
	        {
				base.Setstring(ColumnNames.GenericName, value);
			}
		}

		public virtual string Indications
	    {
			get
	        {
				return base.Getstring(ColumnNames.Indications);
			}
			set
	        {
				base.Setstring(ColumnNames.Indications, value);
			}
		}

		public virtual string Cautions
	    {
			get
	        {
				return base.Getstring(ColumnNames.Cautions);
			}
			set
	        {
				base.Setstring(ColumnNames.Cautions, value);
			}
		}

		public virtual string Contra_indications
	    {
			get
	        {
				return base.Getstring(ColumnNames.Contra_indications);
			}
			set
	        {
				base.Setstring(ColumnNames.Contra_indications, value);
			}
		}

		public virtual string Side_effects
	    {
			get
	        {
				return base.Getstring(ColumnNames.Side_effects);
			}
			set
	        {
				base.Setstring(ColumnNames.Side_effects, value);
			}
		}

		public virtual string Dose
	    {
			get
	        {
				return base.Getstring(ColumnNames.Dose);
			}
			set
	        {
				base.Setstring(ColumnNames.Dose, value);
			}
		}

		public virtual string InterActionLevelCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.InterActionLevelCode);
			}
			set
	        {
				base.Setstring(ColumnNames.InterActionLevelCode, value);
			}
		}

		public virtual string Interaction
	    {
			get
	        {
				return base.Getstring(ColumnNames.Interaction);
			}
			set
	        {
				base.Setstring(ColumnNames.Interaction, value);
			}
		}

		public virtual string General
	    {
			get
	        {
				return base.Getstring(ColumnNames.General);
			}
			set
	        {
				base.Setstring(ColumnNames.General, value);
			}
		}

		public virtual string HDL
	    {
			get
	        {
				return base.Getstring(ColumnNames.HDL);
			}
			set
	        {
				base.Setstring(ColumnNames.HDL, value);
			}
		}

		public virtual string STORE
	    {
			get
	        {
				return base.Getstring(ColumnNames.STORE);
			}
			set
	        {
				base.Setstring(ColumnNames.STORE, value);
			}
		}

		public virtual int CPNUM
	    {
			get
	        {
				return base.Getint(ColumnNames.CPNUM);
			}
			set
	        {
				base.Setint(ColumnNames.CPNUM, value);
			}
		}

		public virtual int Dilution
	    {
			get
	        {
				return base.Getint(ColumnNames.Dilution);
			}
			set
	        {
				base.Setint(ColumnNames.Dilution, value);
			}
		}

		public virtual decimal MaxChemoDose
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.MaxChemoDose);
			}
			set
	        {
				base.Setdecimal(ColumnNames.MaxChemoDose, value);
			}
		}

		public virtual int TPNIngredient
	    {
			get
	        {
				return base.Getint(ColumnNames.TPNIngredient);
			}
			set
	        {
				base.Setint(ColumnNames.TPNIngredient, value);
			}
		}

		public virtual int ChemoCalcType
	    {
			get
	        {
				return base.Getint(ColumnNames.ChemoCalcType);
			}
			set
	        {
				base.Setint(ColumnNames.ChemoCalcType, value);
			}
		}

		public virtual int IsVaccine
	    {
			get
	        {
				return base.Getint(ColumnNames.IsVaccine);
			}
			set
	        {
				base.Setint(ColumnNames.IsVaccine, value);
			}
		}

		public virtual int TradeName_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradeName_ID);
			}
			set
	        {
				base.Setint(ColumnNames.TradeName_ID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_GenericName_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenericName_ID) ? string.Empty : base.GetintAsString(ColumnNames.GenericName_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenericName_ID);
				else
					this.GenericName_ID = base.SetintAsString(ColumnNames.GenericName_ID, value);
			}
		}

		public virtual string s_GenericName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenericName) ? string.Empty : base.GetstringAsString(ColumnNames.GenericName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenericName);
				else
					this.GenericName = base.SetstringAsString(ColumnNames.GenericName, value);
			}
		}

		public virtual string s_Indications
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Indications) ? string.Empty : base.GetstringAsString(ColumnNames.Indications);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Indications);
				else
					this.Indications = base.SetstringAsString(ColumnNames.Indications, value);
			}
		}

		public virtual string s_Cautions
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Cautions) ? string.Empty : base.GetstringAsString(ColumnNames.Cautions);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Cautions);
				else
					this.Cautions = base.SetstringAsString(ColumnNames.Cautions, value);
			}
		}

		public virtual string s_Contra_indications
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Contra_indications) ? string.Empty : base.GetstringAsString(ColumnNames.Contra_indications);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Contra_indications);
				else
					this.Contra_indications = base.SetstringAsString(ColumnNames.Contra_indications, value);
			}
		}

		public virtual string s_Side_effects
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Side_effects) ? string.Empty : base.GetstringAsString(ColumnNames.Side_effects);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Side_effects);
				else
					this.Side_effects = base.SetstringAsString(ColumnNames.Side_effects, value);
			}
		}

		public virtual string s_Dose
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Dose) ? string.Empty : base.GetstringAsString(ColumnNames.Dose);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Dose);
				else
					this.Dose = base.SetstringAsString(ColumnNames.Dose, value);
			}
		}

		public virtual string s_InterActionLevelCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterActionLevelCode) ? string.Empty : base.GetstringAsString(ColumnNames.InterActionLevelCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterActionLevelCode);
				else
					this.InterActionLevelCode = base.SetstringAsString(ColumnNames.InterActionLevelCode, value);
			}
		}

		public virtual string s_Interaction
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Interaction) ? string.Empty : base.GetstringAsString(ColumnNames.Interaction);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Interaction);
				else
					this.Interaction = base.SetstringAsString(ColumnNames.Interaction, value);
			}
		}

		public virtual string s_General
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.General) ? string.Empty : base.GetstringAsString(ColumnNames.General);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.General);
				else
					this.General = base.SetstringAsString(ColumnNames.General, value);
			}
		}

		public virtual string s_HDL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HDL) ? string.Empty : base.GetstringAsString(ColumnNames.HDL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HDL);
				else
					this.HDL = base.SetstringAsString(ColumnNames.HDL, value);
			}
		}

		public virtual string s_STORE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.STORE) ? string.Empty : base.GetstringAsString(ColumnNames.STORE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.STORE);
				else
					this.STORE = base.SetstringAsString(ColumnNames.STORE, value);
			}
		}

		public virtual string s_CPNUM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CPNUM) ? string.Empty : base.GetintAsString(ColumnNames.CPNUM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CPNUM);
				else
					this.CPNUM = base.SetintAsString(ColumnNames.CPNUM, value);
			}
		}

		public virtual string s_Dilution
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Dilution) ? string.Empty : base.GetintAsString(ColumnNames.Dilution);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Dilution);
				else
					this.Dilution = base.SetintAsString(ColumnNames.Dilution, value);
			}
		}

		public virtual string s_MaxChemoDose
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaxChemoDose) ? string.Empty : base.GetdecimalAsString(ColumnNames.MaxChemoDose);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaxChemoDose);
				else
					this.MaxChemoDose = base.SetdecimalAsString(ColumnNames.MaxChemoDose, value);
			}
		}

		public virtual string s_TPNIngredient
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TPNIngredient) ? string.Empty : base.GetintAsString(ColumnNames.TPNIngredient);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TPNIngredient);
				else
					this.TPNIngredient = base.SetintAsString(ColumnNames.TPNIngredient, value);
			}
		}

		public virtual string s_ChemoCalcType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ChemoCalcType) ? string.Empty : base.GetintAsString(ColumnNames.ChemoCalcType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ChemoCalcType);
				else
					this.ChemoCalcType = base.SetintAsString(ColumnNames.ChemoCalcType, value);
			}
		}

		public virtual string s_IsVaccine
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsVaccine) ? string.Empty : base.GetintAsString(ColumnNames.IsVaccine);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsVaccine);
				else
					this.IsVaccine = base.SetintAsString(ColumnNames.IsVaccine, value);
			}
		}

		public virtual string s_TradeName_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradeName_ID) ? string.Empty : base.GetintAsString(ColumnNames.TradeName_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradeName_ID);
				else
					this.TradeName_ID = base.SetintAsString(ColumnNames.TradeName_ID, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter GenericName_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenericName_ID, Parameters.GenericName_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenericName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenericName, Parameters.GenericName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Indications
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Indications, Parameters.Indications);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Cautions
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Cautions, Parameters.Cautions);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Contra_indications
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Contra_indications, Parameters.Contra_indications);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Side_effects
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Side_effects, Parameters.Side_effects);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Dose
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Dose, Parameters.Dose);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterActionLevelCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterActionLevelCode, Parameters.InterActionLevelCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Interaction
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Interaction, Parameters.Interaction);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter General
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.General, Parameters.General);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HDL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HDL, Parameters.HDL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter STORE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.STORE, Parameters.STORE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CPNUM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CPNUM, Parameters.CPNUM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Dilution
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Dilution, Parameters.Dilution);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaxChemoDose
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaxChemoDose, Parameters.MaxChemoDose);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TPNIngredient
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TPNIngredient, Parameters.TPNIngredient);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ChemoCalcType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ChemoCalcType, Parameters.ChemoCalcType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsVaccine
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsVaccine, Parameters.IsVaccine);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradeName_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradeName_ID, Parameters.TradeName_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter GenericName_ID
		    {
				get
		        {
					if(_GenericName_ID_W == null)
	        	    {
						_GenericName_ID_W = TearOff.GenericName_ID;
					}
					return _GenericName_ID_W;
				}
			}

			public WhereParameter GenericName
		    {
				get
		        {
					if(_GenericName_W == null)
	        	    {
						_GenericName_W = TearOff.GenericName;
					}
					return _GenericName_W;
				}
			}

			public WhereParameter Indications
		    {
				get
		        {
					if(_Indications_W == null)
	        	    {
						_Indications_W = TearOff.Indications;
					}
					return _Indications_W;
				}
			}

			public WhereParameter Cautions
		    {
				get
		        {
					if(_Cautions_W == null)
	        	    {
						_Cautions_W = TearOff.Cautions;
					}
					return _Cautions_W;
				}
			}

			public WhereParameter Contra_indications
		    {
				get
		        {
					if(_Contra_indications_W == null)
	        	    {
						_Contra_indications_W = TearOff.Contra_indications;
					}
					return _Contra_indications_W;
				}
			}

			public WhereParameter Side_effects
		    {
				get
		        {
					if(_Side_effects_W == null)
	        	    {
						_Side_effects_W = TearOff.Side_effects;
					}
					return _Side_effects_W;
				}
			}

			public WhereParameter Dose
		    {
				get
		        {
					if(_Dose_W == null)
	        	    {
						_Dose_W = TearOff.Dose;
					}
					return _Dose_W;
				}
			}

			public WhereParameter InterActionLevelCode
		    {
				get
		        {
					if(_InterActionLevelCode_W == null)
	        	    {
						_InterActionLevelCode_W = TearOff.InterActionLevelCode;
					}
					return _InterActionLevelCode_W;
				}
			}

			public WhereParameter Interaction
		    {
				get
		        {
					if(_Interaction_W == null)
	        	    {
						_Interaction_W = TearOff.Interaction;
					}
					return _Interaction_W;
				}
			}

			public WhereParameter General
		    {
				get
		        {
					if(_General_W == null)
	        	    {
						_General_W = TearOff.General;
					}
					return _General_W;
				}
			}

			public WhereParameter HDL
		    {
				get
		        {
					if(_HDL_W == null)
	        	    {
						_HDL_W = TearOff.HDL;
					}
					return _HDL_W;
				}
			}

			public WhereParameter STORE
		    {
				get
		        {
					if(_STORE_W == null)
	        	    {
						_STORE_W = TearOff.STORE;
					}
					return _STORE_W;
				}
			}

			public WhereParameter CPNUM
		    {
				get
		        {
					if(_CPNUM_W == null)
	        	    {
						_CPNUM_W = TearOff.CPNUM;
					}
					return _CPNUM_W;
				}
			}

			public WhereParameter Dilution
		    {
				get
		        {
					if(_Dilution_W == null)
	        	    {
						_Dilution_W = TearOff.Dilution;
					}
					return _Dilution_W;
				}
			}

			public WhereParameter MaxChemoDose
		    {
				get
		        {
					if(_MaxChemoDose_W == null)
	        	    {
						_MaxChemoDose_W = TearOff.MaxChemoDose;
					}
					return _MaxChemoDose_W;
				}
			}

			public WhereParameter TPNIngredient
		    {
				get
		        {
					if(_TPNIngredient_W == null)
	        	    {
						_TPNIngredient_W = TearOff.TPNIngredient;
					}
					return _TPNIngredient_W;
				}
			}

			public WhereParameter ChemoCalcType
		    {
				get
		        {
					if(_ChemoCalcType_W == null)
	        	    {
						_ChemoCalcType_W = TearOff.ChemoCalcType;
					}
					return _ChemoCalcType_W;
				}
			}

			public WhereParameter IsVaccine
		    {
				get
		        {
					if(_IsVaccine_W == null)
	        	    {
						_IsVaccine_W = TearOff.IsVaccine;
					}
					return _IsVaccine_W;
				}
			}

			public WhereParameter TradeName_ID
		    {
				get
		        {
					if(_TradeName_ID_W == null)
	        	    {
						_TradeName_ID_W = TearOff.TradeName_ID;
					}
					return _TradeName_ID_W;
				}
			}

			private WhereParameter _GenericName_ID_W = null;
			private WhereParameter _GenericName_W = null;
			private WhereParameter _Indications_W = null;
			private WhereParameter _Cautions_W = null;
			private WhereParameter _Contra_indications_W = null;
			private WhereParameter _Side_effects_W = null;
			private WhereParameter _Dose_W = null;
			private WhereParameter _InterActionLevelCode_W = null;
			private WhereParameter _Interaction_W = null;
			private WhereParameter _General_W = null;
			private WhereParameter _HDL_W = null;
			private WhereParameter _STORE_W = null;
			private WhereParameter _CPNUM_W = null;
			private WhereParameter _Dilution_W = null;
			private WhereParameter _MaxChemoDose_W = null;
			private WhereParameter _TPNIngredient_W = null;
			private WhereParameter _ChemoCalcType_W = null;
			private WhereParameter _IsVaccine_W = null;
			private WhereParameter _TradeName_ID_W = null;

			public void WhereClauseReset()
			{
				_GenericName_ID_W = null;
				_GenericName_W = null;
				_Indications_W = null;
				_Cautions_W = null;
				_Contra_indications_W = null;
				_Side_effects_W = null;
				_Dose_W = null;
				_InterActionLevelCode_W = null;
				_Interaction_W = null;
				_General_W = null;
				_HDL_W = null;
				_STORE_W = null;
				_CPNUM_W = null;
				_Dilution_W = null;
				_MaxChemoDose_W = null;
				_TPNIngredient_W = null;
				_ChemoCalcType_W = null;
				_IsVaccine_W = null;
				_TradeName_ID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter GenericName_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenericName_ID, Parameters.GenericName_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenericName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenericName, Parameters.GenericName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Indications
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Indications, Parameters.Indications);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Cautions
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cautions, Parameters.Cautions);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Contra_indications
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Contra_indications, Parameters.Contra_indications);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Side_effects
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Side_effects, Parameters.Side_effects);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Dose
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Dose, Parameters.Dose);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterActionLevelCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterActionLevelCode, Parameters.InterActionLevelCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Interaction
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Interaction, Parameters.Interaction);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter General
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.General, Parameters.General);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HDL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HDL, Parameters.HDL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter STORE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.STORE, Parameters.STORE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CPNUM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CPNUM, Parameters.CPNUM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Dilution
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Dilution, Parameters.Dilution);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaxChemoDose
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaxChemoDose, Parameters.MaxChemoDose);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TPNIngredient
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TPNIngredient, Parameters.TPNIngredient);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ChemoCalcType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ChemoCalcType, Parameters.ChemoCalcType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsVaccine
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsVaccine, Parameters.IsVaccine);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradeName_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradeName_ID, Parameters.TradeName_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter GenericName_ID
		    {
				get
		        {
					if(_GenericName_ID_W == null)
	        	    {
						_GenericName_ID_W = TearOff.GenericName_ID;
					}
					return _GenericName_ID_W;
				}
			}

			public AggregateParameter GenericName
		    {
				get
		        {
					if(_GenericName_W == null)
	        	    {
						_GenericName_W = TearOff.GenericName;
					}
					return _GenericName_W;
				}
			}

			public AggregateParameter Indications
		    {
				get
		        {
					if(_Indications_W == null)
	        	    {
						_Indications_W = TearOff.Indications;
					}
					return _Indications_W;
				}
			}

			public AggregateParameter Cautions
		    {
				get
		        {
					if(_Cautions_W == null)
	        	    {
						_Cautions_W = TearOff.Cautions;
					}
					return _Cautions_W;
				}
			}

			public AggregateParameter Contra_indications
		    {
				get
		        {
					if(_Contra_indications_W == null)
	        	    {
						_Contra_indications_W = TearOff.Contra_indications;
					}
					return _Contra_indications_W;
				}
			}

			public AggregateParameter Side_effects
		    {
				get
		        {
					if(_Side_effects_W == null)
	        	    {
						_Side_effects_W = TearOff.Side_effects;
					}
					return _Side_effects_W;
				}
			}

			public AggregateParameter Dose
		    {
				get
		        {
					if(_Dose_W == null)
	        	    {
						_Dose_W = TearOff.Dose;
					}
					return _Dose_W;
				}
			}

			public AggregateParameter InterActionLevelCode
		    {
				get
		        {
					if(_InterActionLevelCode_W == null)
	        	    {
						_InterActionLevelCode_W = TearOff.InterActionLevelCode;
					}
					return _InterActionLevelCode_W;
				}
			}

			public AggregateParameter Interaction
		    {
				get
		        {
					if(_Interaction_W == null)
	        	    {
						_Interaction_W = TearOff.Interaction;
					}
					return _Interaction_W;
				}
			}

			public AggregateParameter General
		    {
				get
		        {
					if(_General_W == null)
	        	    {
						_General_W = TearOff.General;
					}
					return _General_W;
				}
			}

			public AggregateParameter HDL
		    {
				get
		        {
					if(_HDL_W == null)
	        	    {
						_HDL_W = TearOff.HDL;
					}
					return _HDL_W;
				}
			}

			public AggregateParameter STORE
		    {
				get
		        {
					if(_STORE_W == null)
	        	    {
						_STORE_W = TearOff.STORE;
					}
					return _STORE_W;
				}
			}

			public AggregateParameter CPNUM
		    {
				get
		        {
					if(_CPNUM_W == null)
	        	    {
						_CPNUM_W = TearOff.CPNUM;
					}
					return _CPNUM_W;
				}
			}

			public AggregateParameter Dilution
		    {
				get
		        {
					if(_Dilution_W == null)
	        	    {
						_Dilution_W = TearOff.Dilution;
					}
					return _Dilution_W;
				}
			}

			public AggregateParameter MaxChemoDose
		    {
				get
		        {
					if(_MaxChemoDose_W == null)
	        	    {
						_MaxChemoDose_W = TearOff.MaxChemoDose;
					}
					return _MaxChemoDose_W;
				}
			}

			public AggregateParameter TPNIngredient
		    {
				get
		        {
					if(_TPNIngredient_W == null)
	        	    {
						_TPNIngredient_W = TearOff.TPNIngredient;
					}
					return _TPNIngredient_W;
				}
			}

			public AggregateParameter ChemoCalcType
		    {
				get
		        {
					if(_ChemoCalcType_W == null)
	        	    {
						_ChemoCalcType_W = TearOff.ChemoCalcType;
					}
					return _ChemoCalcType_W;
				}
			}

			public AggregateParameter IsVaccine
		    {
				get
		        {
					if(_IsVaccine_W == null)
	        	    {
						_IsVaccine_W = TearOff.IsVaccine;
					}
					return _IsVaccine_W;
				}
			}

			public AggregateParameter TradeName_ID
		    {
				get
		        {
					if(_TradeName_ID_W == null)
	        	    {
						_TradeName_ID_W = TearOff.TradeName_ID;
					}
					return _TradeName_ID_W;
				}
			}

			private AggregateParameter _GenericName_ID_W = null;
			private AggregateParameter _GenericName_W = null;
			private AggregateParameter _Indications_W = null;
			private AggregateParameter _Cautions_W = null;
			private AggregateParameter _Contra_indications_W = null;
			private AggregateParameter _Side_effects_W = null;
			private AggregateParameter _Dose_W = null;
			private AggregateParameter _InterActionLevelCode_W = null;
			private AggregateParameter _Interaction_W = null;
			private AggregateParameter _General_W = null;
			private AggregateParameter _HDL_W = null;
			private AggregateParameter _STORE_W = null;
			private AggregateParameter _CPNUM_W = null;
			private AggregateParameter _Dilution_W = null;
			private AggregateParameter _MaxChemoDose_W = null;
			private AggregateParameter _TPNIngredient_W = null;
			private AggregateParameter _ChemoCalcType_W = null;
			private AggregateParameter _IsVaccine_W = null;
			private AggregateParameter _TradeName_ID_W = null;

			public void AggregateClauseReset()
			{
				_GenericName_ID_W = null;
				_GenericName_W = null;
				_Indications_W = null;
				_Cautions_W = null;
				_Contra_indications_W = null;
				_Side_effects_W = null;
				_Dose_W = null;
				_InterActionLevelCode_W = null;
				_Interaction_W = null;
				_General_W = null;
				_HDL_W = null;
				_STORE_W = null;
				_CPNUM_W = null;
				_Dilution_W = null;
				_MaxChemoDose_W = null;
				_TPNIngredient_W = null;
				_ChemoCalcType_W = null;
				_IsVaccine_W = null;
				_TradeName_ID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
