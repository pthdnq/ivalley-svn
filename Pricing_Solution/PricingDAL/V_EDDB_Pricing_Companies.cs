/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace View
{
	public class _V_EDDB_Pricing_Companies : SqlClientEntity
	{
		public _V_EDDB_Pricing_Companies()
		{
			this.QuerySource = "V_EDDB_Pricing_Companies";
			this.MappingName = "V_EDDB_Pricing_Companies";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CompanyDetID
			{
				get
				{
					return new SqlParameter("@CompanyDetID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompName
			{
				get
				{
					return new SqlParameter("@CompName", SqlDbType.VarChar, 500);
				}
			}
			
			public static SqlParameter License_Type
			{
				get
				{
					return new SqlParameter("@License_Type", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CompanyDetID = "CompanyDetID";
            public const string CompName = "CompName";
            public const string License_Type = "License_Type";
            public const string UserName = "UserName";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CompanyDetID] = _V_EDDB_Pricing_Companies.PropertyNames.CompanyDetID;
					ht[CompName] = _V_EDDB_Pricing_Companies.PropertyNames.CompName;
					ht[License_Type] = _V_EDDB_Pricing_Companies.PropertyNames.License_Type;
					ht[UserName] = _V_EDDB_Pricing_Companies.PropertyNames.UserName;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CompanyDetID = "CompanyDetID";
            public const string CompName = "CompName";
            public const string License_Type = "License_Type";
            public const string UserName = "UserName";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CompanyDetID] = _V_EDDB_Pricing_Companies.ColumnNames.CompanyDetID;
					ht[CompName] = _V_EDDB_Pricing_Companies.ColumnNames.CompName;
					ht[License_Type] = _V_EDDB_Pricing_Companies.ColumnNames.License_Type;
					ht[UserName] = _V_EDDB_Pricing_Companies.ColumnNames.UserName;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CompanyDetID = "s_CompanyDetID";
            public const string CompName = "s_CompName";
            public const string License_Type = "s_License_Type";
            public const string UserName = "s_UserName";

		}
		#endregion	
		
		#region Properties
			public virtual int CompanyDetID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyDetID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyDetID, value);
			}
		}

		public virtual string CompName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompName);
			}
			set
	        {
				base.Setstring(ColumnNames.CompName, value);
			}
		}

		public virtual string License_Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.License_Type);
			}
			set
	        {
				base.Setstring(ColumnNames.License_Type, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CompanyDetID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyDetID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyDetID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyDetID);
				else
					this.CompanyDetID = base.SetintAsString(ColumnNames.CompanyDetID, value);
			}
		}

		public virtual string s_CompName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompName) ? string.Empty : base.GetstringAsString(ColumnNames.CompName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompName);
				else
					this.CompName = base.SetstringAsString(ColumnNames.CompName, value);
			}
		}

		public virtual string s_License_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.License_Type) ? string.Empty : base.GetstringAsString(ColumnNames.License_Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.License_Type);
				else
					this.License_Type = base.SetstringAsString(ColumnNames.License_Type, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CompanyDetID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyDetID, Parameters.CompanyDetID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompName, Parameters.CompName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter License_Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.License_Type, Parameters.License_Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CompanyDetID
		    {
				get
		        {
					if(_CompanyDetID_W == null)
	        	    {
						_CompanyDetID_W = TearOff.CompanyDetID;
					}
					return _CompanyDetID_W;
				}
			}

			public WhereParameter CompName
		    {
				get
		        {
					if(_CompName_W == null)
	        	    {
						_CompName_W = TearOff.CompName;
					}
					return _CompName_W;
				}
			}

			public WhereParameter License_Type
		    {
				get
		        {
					if(_License_Type_W == null)
	        	    {
						_License_Type_W = TearOff.License_Type;
					}
					return _License_Type_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			private WhereParameter _CompanyDetID_W = null;
			private WhereParameter _CompName_W = null;
			private WhereParameter _License_Type_W = null;
			private WhereParameter _UserName_W = null;

			public void WhereClauseReset()
			{
				_CompanyDetID_W = null;
				_CompName_W = null;
				_License_Type_W = null;
				_UserName_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CompanyDetID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyDetID, Parameters.CompanyDetID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompName, Parameters.CompName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter License_Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.License_Type, Parameters.License_Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CompanyDetID
		    {
				get
		        {
					if(_CompanyDetID_W == null)
	        	    {
						_CompanyDetID_W = TearOff.CompanyDetID;
					}
					return _CompanyDetID_W;
				}
			}

			public AggregateParameter CompName
		    {
				get
		        {
					if(_CompName_W == null)
	        	    {
						_CompName_W = TearOff.CompName;
					}
					return _CompName_W;
				}
			}

			public AggregateParameter License_Type
		    {
				get
		        {
					if(_License_Type_W == null)
	        	    {
						_License_Type_W = TearOff.License_Type;
					}
					return _License_Type_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			private AggregateParameter _CompanyDetID_W = null;
			private AggregateParameter _CompName_W = null;
			private AggregateParameter _License_Type_W = null;
			private AggregateParameter _UserName_W = null;

			public void AggregateClauseReset()
			{
				_CompanyDetID_W = null;
				_CompName_W = null;
				_License_Type_W = null;
				_UserName_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
