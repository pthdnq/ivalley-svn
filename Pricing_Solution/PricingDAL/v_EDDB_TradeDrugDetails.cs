/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace View
{
	public class _v_EDDB_TradeDrugDetails : SqlClientEntity
	{
		public _v_EDDB_TradeDrugDetails()
		{
			this.QuerySource = "v_EDDB_TradeDrugDetails";
			this.MappingName = "v_EDDB_TradeDrugDetails";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TradeCode
			{
				get
				{
					return new SqlParameter("@TradeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Drug_license_number
			{
				get
				{
					return new SqlParameter("@Drug_license_number", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Trade_name
			{
				get
				{
					return new SqlParameter("@Trade_name", SqlDbType.VarChar, 300);
				}
			}
			
			public static SqlParameter Strength_value
			{
				get
				{
					return new SqlParameter("@Strength_value", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Type_of_license
			{
				get
				{
					return new SqlParameter("@Type_of_license", SqlDbType.NVarChar, 40);
				}
			}
			
			public static SqlParameter Strength_unit
			{
				get
				{
					return new SqlParameter("@Strength_unit", SqlDbType.VarChar, 30);
				}
			}
			
			public static SqlParameter Dosage_form
			{
				get
				{
					return new SqlParameter("@Dosage_form", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter Generics
			{
				get
				{
					return new SqlParameter("@Generics", SqlDbType.VarChar, 500);
				}
			}
			
			public static SqlParameter LicHold
			{
				get
				{
					return new SqlParameter("@LicHold", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter Manufacturer
			{
				get
				{
					return new SqlParameter("@Manufacturer", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter Packager
			{
				get
				{
					return new SqlParameter("@Packager", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter BatchReleaser
			{
				get
				{
					return new SqlParameter("@BatchReleaser", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter APISupplier
			{
				get
				{
					return new SqlParameter("@APISupplier", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter StorageSite
			{
				get
				{
					return new SqlParameter("@StorageSite", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter Type
			{
				get
				{
					return new SqlParameter("@Type", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter CompanyDetID
			{
				get
				{
					return new SqlParameter("@CompanyDetID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Applicant
			{
				get
				{
					return new SqlParameter("@Applicant", SqlDbType.VarChar, 500);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TradeCode = "TradeCode";
            public const string Drug_license_number = "Drug_license_number";
            public const string Trade_name = "Trade_name";
            public const string Strength_value = "Strength_value";
            public const string Type_of_license = "Type_of_license";
            public const string Strength_unit = "Strength_unit";
            public const string Dosage_form = "Dosage_form";
            public const string Generics = "Generics";
            public const string LicHold = "LicHold";
            public const string Manufacturer = "Manufacturer";
            public const string Packager = "Packager";
            public const string BatchReleaser = "BatchReleaser";
            public const string APISupplier = "APISupplier";
            public const string StorageSite = "StorageSite";
            public const string Type = "Type";
            public const string CompanyDetID = "CompanyDetID";
            public const string Applicant = "Applicant";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradeCode] = _v_EDDB_TradeDrugDetails.PropertyNames.TradeCode;
					ht[Drug_license_number] = _v_EDDB_TradeDrugDetails.PropertyNames.Drug_license_number;
					ht[Trade_name] = _v_EDDB_TradeDrugDetails.PropertyNames.Trade_name;
					ht[Strength_value] = _v_EDDB_TradeDrugDetails.PropertyNames.Strength_value;
					ht[Type_of_license] = _v_EDDB_TradeDrugDetails.PropertyNames.Type_of_license;
					ht[Strength_unit] = _v_EDDB_TradeDrugDetails.PropertyNames.Strength_unit;
					ht[Dosage_form] = _v_EDDB_TradeDrugDetails.PropertyNames.Dosage_form;
					ht[Generics] = _v_EDDB_TradeDrugDetails.PropertyNames.Generics;
					ht[LicHold] = _v_EDDB_TradeDrugDetails.PropertyNames.LicHold;
					ht[Manufacturer] = _v_EDDB_TradeDrugDetails.PropertyNames.Manufacturer;
					ht[Packager] = _v_EDDB_TradeDrugDetails.PropertyNames.Packager;
					ht[BatchReleaser] = _v_EDDB_TradeDrugDetails.PropertyNames.BatchReleaser;
					ht[APISupplier] = _v_EDDB_TradeDrugDetails.PropertyNames.APISupplier;
					ht[StorageSite] = _v_EDDB_TradeDrugDetails.PropertyNames.StorageSite;
					ht[Type] = _v_EDDB_TradeDrugDetails.PropertyNames.Type;
					ht[CompanyDetID] = _v_EDDB_TradeDrugDetails.PropertyNames.CompanyDetID;
					ht[Applicant] = _v_EDDB_TradeDrugDetails.PropertyNames.Applicant;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TradeCode = "TradeCode";
            public const string Drug_license_number = "Drug_license_number";
            public const string Trade_name = "Trade_name";
            public const string Strength_value = "Strength_value";
            public const string Type_of_license = "Type_of_license";
            public const string Strength_unit = "Strength_unit";
            public const string Dosage_form = "Dosage_form";
            public const string Generics = "Generics";
            public const string LicHold = "LicHold";
            public const string Manufacturer = "Manufacturer";
            public const string Packager = "Packager";
            public const string BatchReleaser = "BatchReleaser";
            public const string APISupplier = "APISupplier";
            public const string StorageSite = "StorageSite";
            public const string Type = "Type";
            public const string CompanyDetID = "CompanyDetID";
            public const string Applicant = "Applicant";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradeCode] = _v_EDDB_TradeDrugDetails.ColumnNames.TradeCode;
					ht[Drug_license_number] = _v_EDDB_TradeDrugDetails.ColumnNames.Drug_license_number;
					ht[Trade_name] = _v_EDDB_TradeDrugDetails.ColumnNames.Trade_name;
					ht[Strength_value] = _v_EDDB_TradeDrugDetails.ColumnNames.Strength_value;
					ht[Type_of_license] = _v_EDDB_TradeDrugDetails.ColumnNames.Type_of_license;
					ht[Strength_unit] = _v_EDDB_TradeDrugDetails.ColumnNames.Strength_unit;
					ht[Dosage_form] = _v_EDDB_TradeDrugDetails.ColumnNames.Dosage_form;
					ht[Generics] = _v_EDDB_TradeDrugDetails.ColumnNames.Generics;
					ht[LicHold] = _v_EDDB_TradeDrugDetails.ColumnNames.LicHold;
					ht[Manufacturer] = _v_EDDB_TradeDrugDetails.ColumnNames.Manufacturer;
					ht[Packager] = _v_EDDB_TradeDrugDetails.ColumnNames.Packager;
					ht[BatchReleaser] = _v_EDDB_TradeDrugDetails.ColumnNames.BatchReleaser;
					ht[APISupplier] = _v_EDDB_TradeDrugDetails.ColumnNames.APISupplier;
					ht[StorageSite] = _v_EDDB_TradeDrugDetails.ColumnNames.StorageSite;
					ht[Type] = _v_EDDB_TradeDrugDetails.ColumnNames.Type;
					ht[CompanyDetID] = _v_EDDB_TradeDrugDetails.ColumnNames.CompanyDetID;
					ht[Applicant] = _v_EDDB_TradeDrugDetails.ColumnNames.Applicant;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TradeCode = "s_TradeCode";
            public const string Drug_license_number = "s_Drug_license_number";
            public const string Trade_name = "s_Trade_name";
            public const string Strength_value = "s_Strength_value";
            public const string Type_of_license = "s_Type_of_license";
            public const string Strength_unit = "s_Strength_unit";
            public const string Dosage_form = "s_Dosage_form";
            public const string Generics = "s_Generics";
            public const string LicHold = "s_LicHold";
            public const string Manufacturer = "s_Manufacturer";
            public const string Packager = "s_Packager";
            public const string BatchReleaser = "s_BatchReleaser";
            public const string APISupplier = "s_APISupplier";
            public const string StorageSite = "s_StorageSite";
            public const string Type = "s_Type";
            public const string CompanyDetID = "s_CompanyDetID";
            public const string Applicant = "s_Applicant";

		}
		#endregion	
		
		#region Properties
			public virtual int TradeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.TradeCode);
			}
			set
	        {
				base.Setint(ColumnNames.TradeCode, value);
			}
		}

		public virtual string Drug_license_number
	    {
			get
	        {
				return base.Getstring(ColumnNames.Drug_license_number);
			}
			set
	        {
				base.Setstring(ColumnNames.Drug_license_number, value);
			}
		}

		public virtual string Trade_name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Trade_name);
			}
			set
	        {
				base.Setstring(ColumnNames.Trade_name, value);
			}
		}

		public virtual decimal Strength_value
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Strength_value);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Strength_value, value);
			}
		}

		public virtual string Type_of_license
	    {
			get
	        {
				return base.Getstring(ColumnNames.Type_of_license);
			}
			set
	        {
				base.Setstring(ColumnNames.Type_of_license, value);
			}
		}

		public virtual string Strength_unit
	    {
			get
	        {
				return base.Getstring(ColumnNames.Strength_unit);
			}
			set
	        {
				base.Setstring(ColumnNames.Strength_unit, value);
			}
		}

		public virtual string Dosage_form
	    {
			get
	        {
				return base.Getstring(ColumnNames.Dosage_form);
			}
			set
	        {
				base.Setstring(ColumnNames.Dosage_form, value);
			}
		}

		public virtual string Generics
	    {
			get
	        {
				return base.Getstring(ColumnNames.Generics);
			}
			set
	        {
				base.Setstring(ColumnNames.Generics, value);
			}
		}

		public virtual string LicHold
	    {
			get
	        {
				return base.Getstring(ColumnNames.LicHold);
			}
			set
	        {
				base.Setstring(ColumnNames.LicHold, value);
			}
		}

		public virtual string Manufacturer
	    {
			get
	        {
				return base.Getstring(ColumnNames.Manufacturer);
			}
			set
	        {
				base.Setstring(ColumnNames.Manufacturer, value);
			}
		}

		public virtual string Packager
	    {
			get
	        {
				return base.Getstring(ColumnNames.Packager);
			}
			set
	        {
				base.Setstring(ColumnNames.Packager, value);
			}
		}

		public virtual string BatchReleaser
	    {
			get
	        {
				return base.Getstring(ColumnNames.BatchReleaser);
			}
			set
	        {
				base.Setstring(ColumnNames.BatchReleaser, value);
			}
		}

		public virtual string APISupplier
	    {
			get
	        {
				return base.Getstring(ColumnNames.APISupplier);
			}
			set
	        {
				base.Setstring(ColumnNames.APISupplier, value);
			}
		}

		public virtual string StorageSite
	    {
			get
	        {
				return base.Getstring(ColumnNames.StorageSite);
			}
			set
	        {
				base.Setstring(ColumnNames.StorageSite, value);
			}
		}

		public virtual string Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Type);
			}
			set
	        {
				base.Setstring(ColumnNames.Type, value);
			}
		}

		public virtual int CompanyDetID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyDetID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyDetID, value);
			}
		}

		public virtual string Applicant
	    {
			get
	        {
				return base.Getstring(ColumnNames.Applicant);
			}
			set
	        {
				base.Setstring(ColumnNames.Applicant, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TradeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradeCode) ? string.Empty : base.GetintAsString(ColumnNames.TradeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradeCode);
				else
					this.TradeCode = base.SetintAsString(ColumnNames.TradeCode, value);
			}
		}

		public virtual string s_Drug_license_number
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Drug_license_number) ? string.Empty : base.GetstringAsString(ColumnNames.Drug_license_number);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Drug_license_number);
				else
					this.Drug_license_number = base.SetstringAsString(ColumnNames.Drug_license_number, value);
			}
		}

		public virtual string s_Trade_name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Trade_name) ? string.Empty : base.GetstringAsString(ColumnNames.Trade_name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Trade_name);
				else
					this.Trade_name = base.SetstringAsString(ColumnNames.Trade_name, value);
			}
		}

		public virtual string s_Strength_value
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Strength_value) ? string.Empty : base.GetdecimalAsString(ColumnNames.Strength_value);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Strength_value);
				else
					this.Strength_value = base.SetdecimalAsString(ColumnNames.Strength_value, value);
			}
		}

		public virtual string s_Type_of_license
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Type_of_license) ? string.Empty : base.GetstringAsString(ColumnNames.Type_of_license);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Type_of_license);
				else
					this.Type_of_license = base.SetstringAsString(ColumnNames.Type_of_license, value);
			}
		}

		public virtual string s_Strength_unit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Strength_unit) ? string.Empty : base.GetstringAsString(ColumnNames.Strength_unit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Strength_unit);
				else
					this.Strength_unit = base.SetstringAsString(ColumnNames.Strength_unit, value);
			}
		}

		public virtual string s_Dosage_form
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Dosage_form) ? string.Empty : base.GetstringAsString(ColumnNames.Dosage_form);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Dosage_form);
				else
					this.Dosage_form = base.SetstringAsString(ColumnNames.Dosage_form, value);
			}
		}

		public virtual string s_Generics
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Generics) ? string.Empty : base.GetstringAsString(ColumnNames.Generics);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Generics);
				else
					this.Generics = base.SetstringAsString(ColumnNames.Generics, value);
			}
		}

		public virtual string s_LicHold
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LicHold) ? string.Empty : base.GetstringAsString(ColumnNames.LicHold);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LicHold);
				else
					this.LicHold = base.SetstringAsString(ColumnNames.LicHold, value);
			}
		}

		public virtual string s_Manufacturer
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Manufacturer) ? string.Empty : base.GetstringAsString(ColumnNames.Manufacturer);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Manufacturer);
				else
					this.Manufacturer = base.SetstringAsString(ColumnNames.Manufacturer, value);
			}
		}

		public virtual string s_Packager
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Packager) ? string.Empty : base.GetstringAsString(ColumnNames.Packager);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Packager);
				else
					this.Packager = base.SetstringAsString(ColumnNames.Packager, value);
			}
		}

		public virtual string s_BatchReleaser
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BatchReleaser) ? string.Empty : base.GetstringAsString(ColumnNames.BatchReleaser);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BatchReleaser);
				else
					this.BatchReleaser = base.SetstringAsString(ColumnNames.BatchReleaser, value);
			}
		}

		public virtual string s_APISupplier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.APISupplier) ? string.Empty : base.GetstringAsString(ColumnNames.APISupplier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.APISupplier);
				else
					this.APISupplier = base.SetstringAsString(ColumnNames.APISupplier, value);
			}
		}

		public virtual string s_StorageSite
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StorageSite) ? string.Empty : base.GetstringAsString(ColumnNames.StorageSite);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StorageSite);
				else
					this.StorageSite = base.SetstringAsString(ColumnNames.StorageSite, value);
			}
		}

		public virtual string s_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Type) ? string.Empty : base.GetstringAsString(ColumnNames.Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Type);
				else
					this.Type = base.SetstringAsString(ColumnNames.Type, value);
			}
		}

		public virtual string s_CompanyDetID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyDetID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyDetID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyDetID);
				else
					this.CompanyDetID = base.SetintAsString(ColumnNames.CompanyDetID, value);
			}
		}

		public virtual string s_Applicant
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Applicant) ? string.Empty : base.GetstringAsString(ColumnNames.Applicant);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Applicant);
				else
					this.Applicant = base.SetstringAsString(ColumnNames.Applicant, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TradeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradeCode, Parameters.TradeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Drug_license_number
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Drug_license_number, Parameters.Drug_license_number);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Trade_name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Trade_name, Parameters.Trade_name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Strength_value
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Strength_value, Parameters.Strength_value);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Type_of_license
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Type_of_license, Parameters.Type_of_license);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Strength_unit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Strength_unit, Parameters.Strength_unit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Dosage_form
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Dosage_form, Parameters.Dosage_form);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Generics
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Generics, Parameters.Generics);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LicHold
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LicHold, Parameters.LicHold);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Manufacturer
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Manufacturer, Parameters.Manufacturer);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Packager
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Packager, Parameters.Packager);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BatchReleaser
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BatchReleaser, Parameters.BatchReleaser);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter APISupplier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.APISupplier, Parameters.APISupplier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StorageSite
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StorageSite, Parameters.StorageSite);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Type, Parameters.Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyDetID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyDetID, Parameters.CompanyDetID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Applicant
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Applicant, Parameters.Applicant);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TradeCode
		    {
				get
		        {
					if(_TradeCode_W == null)
	        	    {
						_TradeCode_W = TearOff.TradeCode;
					}
					return _TradeCode_W;
				}
			}

			public WhereParameter Drug_license_number
		    {
				get
		        {
					if(_Drug_license_number_W == null)
	        	    {
						_Drug_license_number_W = TearOff.Drug_license_number;
					}
					return _Drug_license_number_W;
				}
			}

			public WhereParameter Trade_name
		    {
				get
		        {
					if(_Trade_name_W == null)
	        	    {
						_Trade_name_W = TearOff.Trade_name;
					}
					return _Trade_name_W;
				}
			}

			public WhereParameter Strength_value
		    {
				get
		        {
					if(_Strength_value_W == null)
	        	    {
						_Strength_value_W = TearOff.Strength_value;
					}
					return _Strength_value_W;
				}
			}

			public WhereParameter Type_of_license
		    {
				get
		        {
					if(_Type_of_license_W == null)
	        	    {
						_Type_of_license_W = TearOff.Type_of_license;
					}
					return _Type_of_license_W;
				}
			}

			public WhereParameter Strength_unit
		    {
				get
		        {
					if(_Strength_unit_W == null)
	        	    {
						_Strength_unit_W = TearOff.Strength_unit;
					}
					return _Strength_unit_W;
				}
			}

			public WhereParameter Dosage_form
		    {
				get
		        {
					if(_Dosage_form_W == null)
	        	    {
						_Dosage_form_W = TearOff.Dosage_form;
					}
					return _Dosage_form_W;
				}
			}

			public WhereParameter Generics
		    {
				get
		        {
					if(_Generics_W == null)
	        	    {
						_Generics_W = TearOff.Generics;
					}
					return _Generics_W;
				}
			}

			public WhereParameter LicHold
		    {
				get
		        {
					if(_LicHold_W == null)
	        	    {
						_LicHold_W = TearOff.LicHold;
					}
					return _LicHold_W;
				}
			}

			public WhereParameter Manufacturer
		    {
				get
		        {
					if(_Manufacturer_W == null)
	        	    {
						_Manufacturer_W = TearOff.Manufacturer;
					}
					return _Manufacturer_W;
				}
			}

			public WhereParameter Packager
		    {
				get
		        {
					if(_Packager_W == null)
	        	    {
						_Packager_W = TearOff.Packager;
					}
					return _Packager_W;
				}
			}

			public WhereParameter BatchReleaser
		    {
				get
		        {
					if(_BatchReleaser_W == null)
	        	    {
						_BatchReleaser_W = TearOff.BatchReleaser;
					}
					return _BatchReleaser_W;
				}
			}

			public WhereParameter APISupplier
		    {
				get
		        {
					if(_APISupplier_W == null)
	        	    {
						_APISupplier_W = TearOff.APISupplier;
					}
					return _APISupplier_W;
				}
			}

			public WhereParameter StorageSite
		    {
				get
		        {
					if(_StorageSite_W == null)
	        	    {
						_StorageSite_W = TearOff.StorageSite;
					}
					return _StorageSite_W;
				}
			}

			public WhereParameter Type
		    {
				get
		        {
					if(_Type_W == null)
	        	    {
						_Type_W = TearOff.Type;
					}
					return _Type_W;
				}
			}

			public WhereParameter CompanyDetID
		    {
				get
		        {
					if(_CompanyDetID_W == null)
	        	    {
						_CompanyDetID_W = TearOff.CompanyDetID;
					}
					return _CompanyDetID_W;
				}
			}

			public WhereParameter Applicant
		    {
				get
		        {
					if(_Applicant_W == null)
	        	    {
						_Applicant_W = TearOff.Applicant;
					}
					return _Applicant_W;
				}
			}

			private WhereParameter _TradeCode_W = null;
			private WhereParameter _Drug_license_number_W = null;
			private WhereParameter _Trade_name_W = null;
			private WhereParameter _Strength_value_W = null;
			private WhereParameter _Type_of_license_W = null;
			private WhereParameter _Strength_unit_W = null;
			private WhereParameter _Dosage_form_W = null;
			private WhereParameter _Generics_W = null;
			private WhereParameter _LicHold_W = null;
			private WhereParameter _Manufacturer_W = null;
			private WhereParameter _Packager_W = null;
			private WhereParameter _BatchReleaser_W = null;
			private WhereParameter _APISupplier_W = null;
			private WhereParameter _StorageSite_W = null;
			private WhereParameter _Type_W = null;
			private WhereParameter _CompanyDetID_W = null;
			private WhereParameter _Applicant_W = null;

			public void WhereClauseReset()
			{
				_TradeCode_W = null;
				_Drug_license_number_W = null;
				_Trade_name_W = null;
				_Strength_value_W = null;
				_Type_of_license_W = null;
				_Strength_unit_W = null;
				_Dosage_form_W = null;
				_Generics_W = null;
				_LicHold_W = null;
				_Manufacturer_W = null;
				_Packager_W = null;
				_BatchReleaser_W = null;
				_APISupplier_W = null;
				_StorageSite_W = null;
				_Type_W = null;
				_CompanyDetID_W = null;
				_Applicant_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TradeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradeCode, Parameters.TradeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Drug_license_number
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Drug_license_number, Parameters.Drug_license_number);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Trade_name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Trade_name, Parameters.Trade_name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Strength_value
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Strength_value, Parameters.Strength_value);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Type_of_license
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Type_of_license, Parameters.Type_of_license);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Strength_unit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Strength_unit, Parameters.Strength_unit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Dosage_form
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Dosage_form, Parameters.Dosage_form);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Generics
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Generics, Parameters.Generics);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LicHold
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LicHold, Parameters.LicHold);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Manufacturer
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Manufacturer, Parameters.Manufacturer);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Packager
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Packager, Parameters.Packager);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BatchReleaser
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BatchReleaser, Parameters.BatchReleaser);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter APISupplier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.APISupplier, Parameters.APISupplier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StorageSite
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StorageSite, Parameters.StorageSite);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Type, Parameters.Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyDetID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyDetID, Parameters.CompanyDetID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Applicant
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Applicant, Parameters.Applicant);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TradeCode
		    {
				get
		        {
					if(_TradeCode_W == null)
	        	    {
						_TradeCode_W = TearOff.TradeCode;
					}
					return _TradeCode_W;
				}
			}

			public AggregateParameter Drug_license_number
		    {
				get
		        {
					if(_Drug_license_number_W == null)
	        	    {
						_Drug_license_number_W = TearOff.Drug_license_number;
					}
					return _Drug_license_number_W;
				}
			}

			public AggregateParameter Trade_name
		    {
				get
		        {
					if(_Trade_name_W == null)
	        	    {
						_Trade_name_W = TearOff.Trade_name;
					}
					return _Trade_name_W;
				}
			}

			public AggregateParameter Strength_value
		    {
				get
		        {
					if(_Strength_value_W == null)
	        	    {
						_Strength_value_W = TearOff.Strength_value;
					}
					return _Strength_value_W;
				}
			}

			public AggregateParameter Type_of_license
		    {
				get
		        {
					if(_Type_of_license_W == null)
	        	    {
						_Type_of_license_W = TearOff.Type_of_license;
					}
					return _Type_of_license_W;
				}
			}

			public AggregateParameter Strength_unit
		    {
				get
		        {
					if(_Strength_unit_W == null)
	        	    {
						_Strength_unit_W = TearOff.Strength_unit;
					}
					return _Strength_unit_W;
				}
			}

			public AggregateParameter Dosage_form
		    {
				get
		        {
					if(_Dosage_form_W == null)
	        	    {
						_Dosage_form_W = TearOff.Dosage_form;
					}
					return _Dosage_form_W;
				}
			}

			public AggregateParameter Generics
		    {
				get
		        {
					if(_Generics_W == null)
	        	    {
						_Generics_W = TearOff.Generics;
					}
					return _Generics_W;
				}
			}

			public AggregateParameter LicHold
		    {
				get
		        {
					if(_LicHold_W == null)
	        	    {
						_LicHold_W = TearOff.LicHold;
					}
					return _LicHold_W;
				}
			}

			public AggregateParameter Manufacturer
		    {
				get
		        {
					if(_Manufacturer_W == null)
	        	    {
						_Manufacturer_W = TearOff.Manufacturer;
					}
					return _Manufacturer_W;
				}
			}

			public AggregateParameter Packager
		    {
				get
		        {
					if(_Packager_W == null)
	        	    {
						_Packager_W = TearOff.Packager;
					}
					return _Packager_W;
				}
			}

			public AggregateParameter BatchReleaser
		    {
				get
		        {
					if(_BatchReleaser_W == null)
	        	    {
						_BatchReleaser_W = TearOff.BatchReleaser;
					}
					return _BatchReleaser_W;
				}
			}

			public AggregateParameter APISupplier
		    {
				get
		        {
					if(_APISupplier_W == null)
	        	    {
						_APISupplier_W = TearOff.APISupplier;
					}
					return _APISupplier_W;
				}
			}

			public AggregateParameter StorageSite
		    {
				get
		        {
					if(_StorageSite_W == null)
	        	    {
						_StorageSite_W = TearOff.StorageSite;
					}
					return _StorageSite_W;
				}
			}

			public AggregateParameter Type
		    {
				get
		        {
					if(_Type_W == null)
	        	    {
						_Type_W = TearOff.Type;
					}
					return _Type_W;
				}
			}

			public AggregateParameter CompanyDetID
		    {
				get
		        {
					if(_CompanyDetID_W == null)
	        	    {
						_CompanyDetID_W = TearOff.CompanyDetID;
					}
					return _CompanyDetID_W;
				}
			}

			public AggregateParameter Applicant
		    {
				get
		        {
					if(_Applicant_W == null)
	        	    {
						_Applicant_W = TearOff.Applicant;
					}
					return _Applicant_W;
				}
			}

			private AggregateParameter _TradeCode_W = null;
			private AggregateParameter _Drug_license_number_W = null;
			private AggregateParameter _Trade_name_W = null;
			private AggregateParameter _Strength_value_W = null;
			private AggregateParameter _Type_of_license_W = null;
			private AggregateParameter _Strength_unit_W = null;
			private AggregateParameter _Dosage_form_W = null;
			private AggregateParameter _Generics_W = null;
			private AggregateParameter _LicHold_W = null;
			private AggregateParameter _Manufacturer_W = null;
			private AggregateParameter _Packager_W = null;
			private AggregateParameter _BatchReleaser_W = null;
			private AggregateParameter _APISupplier_W = null;
			private AggregateParameter _StorageSite_W = null;
			private AggregateParameter _Type_W = null;
			private AggregateParameter _CompanyDetID_W = null;
			private AggregateParameter _Applicant_W = null;

			public void AggregateClauseReset()
			{
				_TradeCode_W = null;
				_Drug_license_number_W = null;
				_Trade_name_W = null;
				_Strength_value_W = null;
				_Type_of_license_W = null;
				_Strength_unit_W = null;
				_Dosage_form_W = null;
				_Generics_W = null;
				_LicHold_W = null;
				_Manufacturer_W = null;
				_Packager_W = null;
				_BatchReleaser_W = null;
				_APISupplier_W = null;
				_StorageSite_W = null;
				_Type_W = null;
				_CompanyDetID_W = null;
				_Applicant_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
